package CodeGenerator;

import com.ifx.davex.appjetinteract.App2JetInterface;

public class adcglob001c_template
{
  protected static String nl;
  public static synchronized adcglob001c_template create(String lineSeparator)
  {
    nl = lineSeparator;
    adcglob001c_template result = new adcglob001c_template();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = NL + "/*******************************************************************************" + NL + " Copyright (c) 2011, Infineon Technologies AG                                 **" + NL + " All rights reserved.                                                         **" + NL + "                                                                              **" + NL + " Redistribution and use in source and binary forms, with or without           **" + NL + " modification,are permitted provided that the following conditions are met:   **" + NL + "                                                                              **" + NL + " *Redistributions of source code must retain the above copyright notice,      **" + NL + " this list of conditions and the following disclaimer.                        **" + NL + " *Redistributions in binary form must reproduce the above copyright notice,   **" + NL + " this list of conditions and the following disclaimer in the documentation    **" + NL + " and/or other materials provided with the distribution.                       **" + NL + " *Neither the name of the copyright holders nor the names of its contributors **" + NL + " may be used to endorse or promote products derived from this software without**" + NL + " specific prior written permission.                                           **" + NL + "                                                                              **" + NL + " THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"  **" + NL + " AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **" + NL + " IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **" + NL + " ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **" + NL + " LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **" + NL + " CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **" + NL + " SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **" + NL + " INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **" + NL + " CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **" + NL + " ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **" + NL + " POSSIBILITY OF SUCH DAMAGE.                                                  **" + NL + "                                                                              **" + NL + " To improve the quality of the software, users are encouraged to share        **" + NL + " modifications, enhancements or bug fixes with Infineon Technologies AG       **" + NL + " dave@infineon.com).                                                          **" + NL + "                                                                              **" + NL + "********************************************************************************" + NL + "**                                                                            **" + NL + "**                                                                            **" + NL + "** PLATFORM : Infineon XMC4500 Series                                         **" + NL + "**                                                                            **" + NL + "** COMPILER : Compiler Independent                                            **" + NL + "**                                                                            **" + NL + "** AUTHOR : App Developer                                                     **" + NL + "**                                                                            **" + NL + "** MAY BE CHANGED BY USER [yes/no]: Yes                                      **" + NL + "**                                                                            **" + NL + "** MODIFICATION DATE : July 31, 2012                                         **" + NL + "**                                                                            **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                       Author(s) Identity                                   **" + NL + "********************************************************************************" + NL + "**                                                                            **" + NL + "** Initials           Name                                                    **" + NL + "** ---------------------------------------------------------------------------**" + NL + "** PrashanA           App Developer                                           **" + NL + "*******************************************************************************/" + NL + "" + NL + "/**" + NL + " * @file ADCGLOB001.c" + NL + " *" + NL + " * @brief" + NL + " * This is global ADC App which allows the sharing of global ADC resources." + NL + " */" + NL + "" + NL + "/*******************************************************************************" + NL + " ** INCLUDE FILES                                                             **" + NL + " ******************************************************************************/" + NL + "" + NL + "#include <DAVE3.h>" + NL + NL;
  protected final String TEXT_2 = NL + "/**" + NL + " * @cond INTERNAL_DOCS" + NL + " */" + NL + "/*******************************************************************************" + NL + "**                              API DEFINITION" + NL + "*******************************************************************************/" + NL + "" + NL + "/**" + NL + " *This function initialize all VADC Global registers based on GUI configuration." + NL + " */" + NL + "void ADCGLOB001_Init(void)" + NL + "{" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001,(uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "  " + NL + "  if(ADCGLOB001_Handle0.kDynamicDataPtr->StateType == ADCGLOB001_UNINITIALIZED )" + NL + "  {" + NL + "      " + NL + "    /* Initialise clock init.*/" + NL + "    CLK001_Init();  " + NL + "        " + NL + "    /* Bring ADC Module Out of Reset */" + NL + "    RESET001_DeassertReset(PER0_VADC);" + NL + "      " + NL + "    /* Bring the module out of disabled state.*/" + NL + "    CLR_BIT( ADCGLOB001_Handle0.kGlobalPtr->CLC, VADC_CLC_DISR_Pos);" + NL + "    /** " + NL + "     * Make divider bit fields writable." + NL + "     * Configure Divider Factor for the Analog Internal Clock." + NL + "     * Configure Divider Factor for the Arbiter Clock." + NL + "     * Configure Double Clock for the MSB Conversion." + NL + "     */" + NL + "    ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG = \\" + NL + "                (uint32_t)(((uint32_t)1<<VADC_GLOBCFG_DIVWC_Pos)| \\" + NL + "                (((uint32_t)ADCGLOB001_Handle0.kArbiterClkDivider <<VADC_GLOBCFG_DIVD_Pos) & VADC_GLOBCFG_DIVD_Msk)| \\" + NL + "                (((uint32_t)ADCGLOB001_Handle0.keDoubleClkMSBConver <<VADC_GLOBCFG_DCMSB_Pos)&VADC_GLOBCFG_DCMSB_Msk)| \\" + NL + "                (((uint32_t)ADCGLOB001_Handle0.kAnalogClkDivider <<VADC_GLOBCFG_DIVA_Pos)&VADC_GLOBCFG_DIVA_Msk));" + NL + "    /* Make the divider bit fields write protected */" + NL + "    CLR_BIT( ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG, VADC_GLOBCFG_DIVWC_Pos);" + NL + "                    " + NL + "    /** " + NL + "     * Configure Class0 Sample Time Control for Standard Conversion." + NL + "     * Configure Class0 Sample Time Control for EMUX Conversion." + NL + "     * Configure Class0 Conversion Mode for Standard Conversion." + NL + "     * Configure Class0 Conversion Mode for EMUX Conversion." + NL + "     */" + NL + "    ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[0] = \\" + NL + "                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass0 << VADC_GLOBICLASS_CME_Pos)&VADC_GLOBICLASS_CME_Msk)| \\" + NL + "                (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass0 <<VADC_GLOBICLASS_STCE_Pos)&VADC_GLOBICLASS_STCE_Msk)| \\" + NL + "                (((uint32_t)ADCGLOB001_Handle0.kConversionModeClass0 <<VADC_GLOBICLASS_CMS_Pos)&VADC_GLOBICLASS_CMS_Msk)| \\" + NL + "                (((uint32_t)ADCGLOB001_Handle0.kSampleTimeControlClass0 <<VADC_GLOBICLASS_STCS_Pos)&VADC_GLOBICLASS_STCS_Msk));" + NL + "    /** " + NL + "     * Configure Class1 Sample Time Control for Standard Conversion." + NL + "     * Configure Class1 Sample Time Control for EMUX Conversion." + NL + "     * Configure Class1 Conversion Mode for Standard Conversion." + NL + "     * Configure Class1 Conversion Mode for EMUX Conversion." + NL + "     */    " + NL + "    ADCGLOB001_Handle0.kGlobalPtr->GLOBICLASS[1] = \\" + NL + "                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.kEMUXConversionModeClass1 << VADC_GLOBICLASS_CME_Pos)&VADC_GLOBICLASS_CME_Msk)| \\" + NL + "                (((uint32_t)ADCGLOB001_Handle0.kEMUXSampleTimeControlClass1 <<VADC_GLOBICLASS_STCE_Pos)&VADC_GLOBICLASS_STCE_Msk)| \\" + NL + "                (((uint32_t)ADCGLOB001_Handle0.kConversionModeClass1 <<VADC_GLOBICLASS_CMS_Pos)&VADC_GLOBICLASS_CMS_Msk)| \\" + NL + "                (((uint32_t)ADCGLOB001_Handle0.kSampleTimeControlClass1<<VADC_GLOBICLASS_STCS_Pos)&VADC_GLOBICLASS_STCS_Msk));" + NL + "          " + NL + "    /* Configure the lower and upper boundary based on the GUI configuration.*/" + NL + "    ADCGLOB001_Handle0.kGlobalPtr->GLOBBOUND = \\" + NL + "                (uint32_t)((((uint32_t)ADCGLOB001_Handle0.KGlobBoundary1 <<VADC_GLOBBOUND_BOUNDARY1_Pos)&VADC_GLOBBOUND_BOUNDARY1_Msk)| \\" + NL + "                (((uint32_t)ADCGLOB001_Handle0.KGlobBoundary0 <<VADC_GLOBBOUND_BOUNDARY0_Pos)&VADC_GLOBBOUND_BOUNDARY0_Msk));" + NL + "             " + NL + "    ADCGLOB001_Handle0.kDynamicDataPtr->StateType = ADCGLOB001_INITIALIZED;" + NL + "  } else {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }" + NL + "" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function will de-initialize VADC Global registers." + NL + " */" + NL + "status_t ADCGLOB001_DeInit(const ADCGLOB001_HandleType * HandlePtr)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "  " + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001,(uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if(HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED )" + NL + "  {" + NL + "    /* Bring the module out of disabled state */" + NL + "    CLR_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_DISR_Pos);" + NL + "        " + NL + "    /* Make divider bit fields writable and deconfigure Analog Internal Clock, " + NL + "     Arbiter Clock & MSB Conversion bits.*/" + NL + "    HandlePtr->kGlobalPtr->GLOBCFG = \\" + NL + "                    (((uint32_t)1<<VADC_GLOBCFG_DIVWC_Pos)|((~(VADC_GLOBCFG_DIVD_Msk))& \\" + NL + "                    (~(VADC_GLOBCFG_DCMSB_Msk)) & (~(VADC_GLOBCFG_DIVA_Msk))));" + NL + "        " + NL + "    /* Again make the divider bit fields write protected */" + NL + "    CLR_BIT( HandlePtr->kGlobalPtr->GLOBCFG, VADC_GLOBCFG_DIVWC_Pos);  " + NL + "        " + NL + "    /* " + NL + "     * Configure Class0 Sample Time Control for Standard Conversion into default" + NL + "     *  mode." + NL + "     * Configure Class0 Conversion Mode for Standard Conversion into default mode." + NL + "     * Configure Class0 Sample Time Control for EMUX Conversion into default mode." + NL + "     * Configure Class0  Conversion Mode for EMUX Conversion into default mode." + NL + "     */" + NL + "    HandlePtr->kGlobalPtr->GLOBICLASS[0] = \\" + NL + "                ((~(VADC_GLOBICLASS_CME_Msk))&(~(VADC_GLOBICLASS_STCE_Msk))& \\" + NL + "                (~(VADC_GLOBICLASS_CMS_Msk))&(~(VADC_GLOBICLASS_STCS_Msk)));  " + NL + "    /* " + NL + "     * Configure Class1 Sample Time Control for Standard Conversion into default" + NL + "     *  mode." + NL + "     * Configure Class1 Conversion Mode for Standard Conversion into default mode." + NL + "     * Configure Class1 Sample Time Control for EMUX Conversion into default mode." + NL + "     * Configure Class1  Conversion Mode for EMUX Conversion into default mode." + NL + "     */" + NL + "    HandlePtr->kGlobalPtr->GLOBICLASS[1] = \\" + NL + "                    ((~(VADC_GLOBICLASS_CME_Msk))&(~(VADC_GLOBICLASS_STCE_Msk))& \\" + NL + "                    (~(VADC_GLOBICLASS_CMS_Msk))&(~(VADC_GLOBICLASS_STCS_Msk)));" + NL + "        " + NL + "    /* Configure global lower and upper boundary value into default value.*/" + NL + "    HandlePtr->kGlobalPtr->GLOBBOUND = \\" + NL + "                    ((~(VADC_GLOBBOUND_BOUNDARY1_Msk))&(~(VADC_GLOBBOUND_BOUNDARY0_Msk)));" + NL + "         " + NL + "    HandlePtr->kDynamicDataPtr->StateType = ADCGLOB001_UNINITIALIZED;" + NL + "    Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "  } else {" + NL + "      ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }" + NL + "" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  " + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function disable the control of the module." + NL + " */" + NL + "status_t ADCGLOB001_CLKRequestDisable(const ADCGLOB001_HandleType * HandlePtr)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "    " + NL + "    /* Bring the module in disabled state" + NL + "    * Module Disable Request Bit" + NL + "    * 0 : enable the module clock  " + NL + "    * 1 : stop the module clock */" + NL + "      " + NL + "    SET_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_DISR_Pos);" + NL + "" + NL + "    Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "" + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "/**" + NL + " * This function enable the control of the module." + NL + " */" + NL + "status_t ADCGLOB001_CLKRequestEnable(const ADCGLOB001_HandleType * HandlePtr)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "    /* Bring the module out of disabled state */" + NL + "      " + NL + "    CLR_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_DISR_Pos);" + NL + "" + NL + "    Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "/**" + NL + " * This function Initiate the start-up calibration phase." + NL + " */" + NL + "" + NL + "status_t ADCGLOB001_SetStartUpCalibration(" + NL + "    const ADCGLOB001_HandleType *HandlePtr" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "  uint32_t  CalibrationStatus;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "    /* Initiate Start-Up Calibration */" + NL + "      " + NL + "    SET_BIT( HandlePtr->kGlobalPtr->GLOBCFG, VADC_GLOBCFG_SUCAL_Pos);" + NL + "    " + NL + "    /*Wait for calibration to be finished*/" + NL + "    " + NL + "    do{" + NL + "        CalibrationStatus= (HandlePtr->kGlobalPtr->GLOBCFG & 0x80000000);" + NL + "    }while (CalibrationStatus!=(uint32_t)0);" + NL + "    Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "/**" + NL + " * This function Initialise the calibration based based on GUI configuration." + NL + " */" + NL + "status_t ADCGLOB001_StartUpCalibrationInit(void)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "  uint32_t  CalibrationStatus;" + NL + "    " + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001,(uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if(ADCGLOB001_Handle0.kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED )" + NL + "  {" + NL + "    /* Initialise Calibration */" + NL + "        " + NL + "      if(ADCGLOB001_Handle0.keStartCalib == (uint8_t)1)" + NL + "      {" + NL + "          /* Initiate Start-Up Calibration */" + NL + "          SET_BIT( " + NL + "              ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG," + NL + "              VADC_GLOBCFG_SUCAL_Pos" + NL + "              ); " + NL + "          /*Wait for calibration to be finished*/ " + NL + "          do{" + NL + "              CalibrationStatus= \\" + NL + "                  (ADCGLOB001_Handle0.kGlobalPtr->GLOBCFG & 0x80000000);" + NL + "          }while (CalibrationStatus!=(uint32_t)0);" + NL + "      } " + NL + "      " + NL + "    Status = (uint32_t)DAVEApp_SUCCESS; " + NL + "  }" + NL + "    " + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  " + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function Enables Sleep Mode Control.Which is used to control module?s " + NL + " * reaction to sleep mode." + NL + " */" + NL + "status_t ADCGLOB001_EnableSleepModeControl(" + NL + "    const ADCGLOB001_HandleType * HandlePtr" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "      /* Reset  Sleep Mode Enable Control bit*/" + NL + "      CLR_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_EDIS_Pos);" + NL + "" + NL + "    Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "/**" + NL + " * This function disregards Sleep Mode Control." + NL + " */" + NL + "status_t ADCGLOB001_DisregardSleepModeControl(" + NL + "    const ADCGLOB001_HandleType * HandlePtr" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "    /* set  Sleep Mode Enable Control bit*/" + NL + "    SET_BIT( HandlePtr->kGlobalPtr->CLC, VADC_CLC_EDIS_Pos);" + NL + "" + NL + "    Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function configure the class 0 conversion mode for standard conversions." + NL + " */" + NL + "status_t ADCGLOB001_SetGlobClass0ConvMode(" + NL + "    const ADCGLOB001_HandleType * HandlePtr," + NL + "    ADCGLOB001_ConversionMode ConversionModeVal" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "      if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) || " + NL + "          (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) { " + NL + "        /* Set the global class0 conversion mode */" + NL + "        WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0]," + NL + "                VADC_GLOBICLASS_CMS_Msk," + NL + "                VADC_GLOBICLASS_CMS_Pos," + NL + "                (uint32_t)ConversionModeVal" + NL + "              );" + NL + "" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "      } else {" + NL + "        Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "      }       " + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  " + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "/**" + NL + " * This function configure the class 0 Sample Time Control for Standard " + NL + " * Conversions." + NL + " */" + NL + "" + NL + "status_t ADCGLOB001_SetGlobClass0SampleTime(" + NL + "    const ADCGLOB001_HandleType * HandlePtr," + NL + "    uint8_t SampleTime" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "    if(SampleTime < (uint8_t)32){ " + NL + "      /* Set the global class0 Sample Time */" + NL + "      WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0]," + NL + "              VADC_GLOBICLASS_STCS_Msk," + NL + "              VADC_GLOBICLASS_STCS_Pos," + NL + "              (uint32_t)SampleTime" + NL + "            );" + NL + "" + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    } else {" + NL + "      Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "    } " + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "" + NL + "}" + NL + "/**" + NL + " * This function configure the class 0 Conversion Mode for EMUX Conversions." + NL + " */" + NL + "status_t ADCGLOB001_SetGlobClass0EmuxConvMode(" + NL + "    const ADCGLOB001_HandleType * HandlePtr," + NL + "    ADCGLOB001_ConversionMode ConversionModeVal" + NL + "    )" + NL + "{" + NL;
  protected final String TEXT_3 = "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {  " + NL + "    if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) || " + NL + "        (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) { " + NL + "      /* Set the global class0 External Multiplexer conversion mode*/" + NL + "      WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0]," + NL + "              VADC_GLOBICLASS_CME_Msk," + NL + "              VADC_GLOBICLASS_CME_Pos," + NL + "              (uint32_t)ConversionModeVal" + NL + "            );" + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "              " + NL + "    } else {" + NL + "      Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "    }           " + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function configure the class 0 Sample Time Control for EMUX Conversions." + NL + " */" + NL + "status_t ADCGLOB001_SetGlobClass0EmuxSampleTime(" + NL + "    const ADCGLOB001_HandleType * HandlePtr," + NL + "    uint8_t SampleTime" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "    if(SampleTime < (uint8_t)32){" + NL + "         " + NL + "      /* Set the global class0 External Multiplexer Sample Time */" + NL + "      WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[0]," + NL + "              VADC_GLOBICLASS_STCE_Msk," + NL + "              VADC_GLOBICLASS_STCE_Pos," + NL + "              (uint32_t)SampleTime" + NL + "             );" + NL + "" + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "         " + NL + "     } else {" + NL + "         " + NL + "       Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "     }    " + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function configure the class 1 conversion mode for standard conversions." + NL + " */" + NL + "status_t ADCGLOB001_SetGlobClass1ConvMode(" + NL + "    const ADCGLOB001_HandleType * HandlePtr," + NL + "    ADCGLOB001_ConversionMode ConversionModeVal" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "      if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) ||" + NL + "          (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) { " + NL + "      /* Set the global class 1 conversion mode */" + NL + "       WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1]," + NL + "               VADC_GLOBICLASS_CMS_Msk," + NL + "               VADC_GLOBICLASS_CMS_Pos," + NL + "               (uint32_t)ConversionModeVal" + NL + "             );" + NL + "" + NL + "       Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "              " + NL + "          } else {" + NL + "                   Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "          }      " + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "/**" + NL + " * This function configure the class 1 Sample Time Control for Standard" + NL + " * Conversions." + NL + " */" + NL + "status_t ADCGLOB001_SetGlobClass1SampleTime(" + NL + "    const ADCGLOB001_HandleType * HandlePtr," + NL + "    uint8_t SampleTime" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "      " + NL + "      if(SampleTime < (uint8_t)32){" + NL + "        /* Write the global class 1 Sample Time */        " + NL + "        WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1]," + NL + "                VADC_GLOBICLASS_STCS_Msk," + NL + "                VADC_GLOBICLASS_STCS_Pos," + NL + "                (uint32_t)SampleTime" + NL + "              );" + NL + "        " + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;      " + NL + "        " + NL + "      } else {" + NL + "          " + NL + "        Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "      }      " + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function configure the class 1 Conversion Mode for EMUX Conversions." + NL + " */" + NL + "status_t ADCGLOB001_SetGlobClass1EmuxConvMode(" + NL + "    const ADCGLOB001_HandleType * HandlePtr," + NL + "    ADCGLOB001_ConversionMode ConversionModeVal" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "    if((ConversionModeVal < (ADCGLOB001_ConversionMode)3) ||" + NL + "        (ConversionModeVal ==(ADCGLOB001_ConversionMode)5)) { " + NL + "        /* Write the global class1 External Multiplexer conversion mode */" + NL + "              " + NL + "            WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1]," + NL + "                    VADC_GLOBICLASS_CME_Msk," + NL + "                    VADC_GLOBICLASS_CME_Pos," + NL + "                    (uint32_t)ConversionModeVal" + NL + "                  );" + NL + "            Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "     } else {" + NL + "                Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "     }     " + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function configure the class 1 Sample Time Control for EMUX Conversions." + NL + " */" + NL + "status_t ADCGLOB001_SetGlobClass1EmuxSampleTime(" + NL + "    const ADCGLOB001_HandleType * HandlePtr," + NL + "    uint8_t SampleTime" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {      " + NL + "      if(SampleTime < (uint8_t)32){" + NL + "        /* Write the global class1 External Multiplexer Sample Time */" + NL + "        WR_REG( HandlePtr->kGlobalPtr->GLOBICLASS[1]," + NL + "                VADC_GLOBICLASS_STCE_Msk," + NL + "                VADC_GLOBICLASS_STCE_Pos," + NL + "                (uint32_t)SampleTime" + NL + "              );" + NL + "        Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "         " + NL + "      } else {" + NL + "        " + NL + "        Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "      }  " + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "/**" + NL + " * This function gives the status of Module Disable bit." + NL + " */" + NL + "status_t ADCGLOB001_GetDisableBitStatus(" + NL + "    const ADCGLOB001_HandleType * HandlePtr," + NL + "    uint8_t *StatusValue" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "      /*Read the status value */" + NL + "      " + NL + "      *StatusValue = (uint8_t) RD_REG( HandlePtr->kGlobalPtr->CLC," + NL + "                                       VADC_CLC_DISS_Msk," + NL + "                                       VADC_CLC_DISS_Pos" + NL + "                                     );" + NL + "    Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "/**" + NL + " * This function gives the Id Value." + NL + " */" + NL + "" + NL + "status_t ADCGLOB001_GetIdValue(" + NL + "    const ADCGLOB001_HandleType * HandlePtr," + NL + "    uint32_t *IDValue" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "    /*Read the ID value */" + NL + "    *IDValue =(uint32_t)HandlePtr->kGlobalPtr->ID;     " + NL + "    " + NL + "    Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function configure the group number to be used for converter diagnostics" + NL + " * conversions." + NL + " */" + NL + "" + NL + "status_t ADCGLOB001_GTFRConvtrDiagnoGrp(const ADCGLOB001_HandleType * HandlePtr," + NL + "    uint8_t GroupValue" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {      " + NL + "    if(GroupValue < (uint8_t)16){" + NL + "      /*clear the group number.*/  " + NL + "      HandlePtr->kGlobalPtr->GLOBTF = (VADC_GLOBTF_CDWC_Msk|" + NL + "              ((HandlePtr->kGlobalPtr->GLOBTF)& (~(VADC_GLOBTF_CDGR_Msk))));" + NL + "      /*Write the group number to be used for converter diagnostics conversions.*/ " + NL + "      HandlePtr->kGlobalPtr->GLOBTF |= (VADC_GLOBTF_CDWC_Msk |" + NL + "              (((uint32_t)GroupValue << VADC_GLOBTF_CDGR_Pos) & VADC_GLOBTF_CDGR_Msk));" + NL + "            " + NL + "      /*Clear the Write Control for Conversion Diagnostics*/   " + NL + "      CLR_BIT(HandlePtr->kGlobalPtr->GLOBTF, VADC_GLOBTF_CDWC_Pos);        " + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;             " + NL + "    } else {      " + NL + "      Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "    }             " + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "/**" + NL + " * This function configure the Converter Diagnostics pull devices connected as " + NL + " * selected by bitfield CDSEL." + NL + " */" + NL + "status_t ADCGLOB001_GTFRConvtrDiagnoEnable(" + NL + "    const ADCGLOB001_HandleType * HandlePtr" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "    /*Enable the Converter Diagnostics*/" + NL + "    HandlePtr->kGlobalPtr->GLOBTF |= " + NL + "        (VADC_GLOBTF_CDWC_Msk | VADC_GLOBTF_CDEN_Msk);" + NL + "    /*Clear the Write Control for Conversion Diagnostics*/   " + NL + "    CLR_BIT(HandlePtr->kGlobalPtr->GLOBTF, VADC_GLOBTF_CDWC_Pos);      " + NL + "    Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "/**" + NL + " * This function configure the Converter Diagnostics Pull-Devices Select value." + NL + " */" + NL + "status_t ADCGLOB001_GTFRConvtrDiagnoPullDevicesSelect(" + NL + "    const ADCGLOB001_HandleType * HandlePtr," + NL + "    uint8_t SelectValue" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  {" + NL + "    if(SelectValue < (uint8_t)4){" + NL + "      /*Clear Converter Diagnostics Pull-Devices Select value  */  " + NL + "       HandlePtr->kGlobalPtr->GLOBTF = (VADC_GLOBTF_CDWC_Msk|" + NL + "               ((HandlePtr->kGlobalPtr->GLOBTF)& (~(VADC_GLOBTF_CDSEL_Msk))));" + NL + "              " + NL + "      /* Write the Converter Diagnostics Pull-Devices Select value */" + NL + "       HandlePtr->kGlobalPtr->GLOBTF |= (VADC_GLOBTF_CDWC_Msk |" + NL + "               (((uint32_t)SelectValue << VADC_GLOBTF_CDSEL_Pos) & VADC_GLOBTF_CDSEL_Msk));" + NL + "      /*Clear the Write Control for Conversion Diagnostics*/    " + NL + "       " + NL + "       CLR_BIT(HandlePtr->kGlobalPtr->GLOBTF, VADC_GLOBTF_CDWC_Pos);    " + NL + "       Status = (uint32_t)DAVEApp_SUCCESS;    " + NL + "     } else {          " + NL + "        Status = (uint32_t)ADCGLOB001_INVALID_PARAM_ERROR;" + NL + "     }     " + NL + "  }" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/**" + NL + " * This function configure the Pull-Down Diagnostics Enable register." + NL + " */" + NL + "status_t ADCGLOB001_GTFRPullDwnDiagnoEnable(" + NL + "    const ADCGLOB001_HandleType * HandlePtr" + NL + "    )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGLOB001_OPER_NOT_ALLOWED;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_ENTRY);" + NL + "" + NL + "  if (HandlePtr->kDynamicDataPtr->StateType == ADCGLOB001_INITIALIZED)" + NL + "  { " + NL + "   /*Enable the Pull-Down Diagnostics */  " + NL + "    HandlePtr->kGlobalPtr->GLOBTF |=" + NL + "        (VADC_GLOBTF_MDWC_Msk | VADC_GLOBTF_PDD_Msk);" + NL + "    /*Clear the Write Control for Multiplexer Diagnostics*/  " + NL + "    CLR_BIT(HandlePtr->kGlobalPtr->GLOBTF, VADC_GLOBTF_MDWC_Pos);    " + NL;
  protected final String TEXT_4 = "    " + NL + "    Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "  }" + NL + "" + NL + "  if (Status != (uint32_t)DAVEApp_SUCCESS)" + NL + "  {" + NL + "    ERROR(GID_ADCGLOB001, (uint8_t)Status, 0, NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGLOB001, (uint32_t)ADCGLOB001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "/**" + NL + " * @endcond" + NL + " */";
  protected final String TEXT_5 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     App2JetInterface app = (App2JetInterface) argument; 
    stringBuffer.append(TEXT_1);
     String AppBaseuri = "app/adcglob001/"; 
    stringBuffer.append(TEXT_2);
    stringBuffer.append(TEXT_3);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(TEXT_5);
    return stringBuffer.toString();
  }
}
