package CodeGenerator;

import java.util.*;
import com.ifx.davex.appjetinteract.App2JetInterface;

public class ethernetphyh_template
{
  protected static String nl;
  public static synchronized ethernetphyh_template create(String lineSeparator)
  {
    nl = lineSeparator;
    ethernetphyh_template result = new ethernetphyh_template();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = " /******************************************************************************" + NL + " *" + NL + " * Copyright (C) 2011 Infineon Technologies AG. All rights reserved." + NL + " *" + NL + " * Infineon Technologies AG (Infineon) is supplying this software for use with " + NL + " * Infineon's microcontrollers.  " + NL + " * This file can be freely distributed within development tools that are " + NL + " * supporting such microcontrollersnfineon XMC4000 Series                                         **" + NL + "**                                                                            **" + NL + "** COMPILER : Compiler Independent                                            **" + NL + "**                                                                            **" + NL + "** AUTHOR : DAVE App Developer                                                **" + NL + "**                                                                            **" + NL + "** MAY BE CHANGED BY USER [Yes/No]: Yes                                       **" + NL + "**                                                                            **" + NL + "** MODIFICATION DATE : Nov 12, 2012                                          **" + NL + "**                                                                            **" + NL + "*******************************************************************************/" + NL + "/*******************************************************************************" + NL + "**                       Author(s) Identity                                   **" + NL + "********************************************************************************" + NL + "**                                                                            **" + NL + "** Initials     Name                                                          **" + NL + "** ---------------------------------------------------------------------------**" + NL + "** RS          DAVE App Developer                                             **" + NL + "********************************************************************************";
  protected final String TEXT_2 = NL + " * @file   EthernetPHY.h" + NL + " *" + NL + " * @App Version ETH002 <";
  protected final String TEXT_3 = ">" + NL + " *" + NL + " * @brief  Header file of Ethernet PHY App. " + NL + " *" + NL + " */ " + NL + "" + NL + "#ifndef ETH_PHY_H_" + NL + "#define ETH_PHY_H_" + NL + "" + NL + "/*******************************************************************************" + NL + " ** INCLUDE FILES                                                             **" + NL + " ******************************************************************************/" + NL + "#include <DAVE3.h>" + NL + "/**" + NL + " * @addtogroup EthernetPHY_publicparam" + NL + " * @{" + NL + " */" + NL + "" + NL + "" + NL + "/**" + NL + " * This is Duplex mode (Half or Full)." + NL + " */" + NL + "enum Mii_Duplex_Mode" + NL + "{" + NL + "  /** Half Duplex Mode */" + NL + "  HALFDUPLEX = 1," + NL + "  /** Full Duplex Mode */" + NL + "  FULLDUPLEX = 2," + NL + "};" + NL + "" + NL + "" + NL + "/**" + NL + " * This is Link speed." + NL + " */" + NL + "enum Mii_Link_Speed" + NL + "{" + NL + "  /** 10 Mbps Speed */" + NL + "  SPEED10     = 1," + NL + "  /** 100 Mbps Speed */" + NL + "  SPEED100    = 2," + NL + "};" + NL + "" + NL + "/**" + NL + " * Error code enumeration for Ethernet PHY" + NL + " */" + NL + "enum PHY_ERROR" + NL + "{" + NL + "  /**" + NL + "   * PHY Initialization failed" + NL + "   */" + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param MODULENAME ETH002" + NL + "   * @endcond" + NL + "   */" + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param ERRCODESTRING1 PHY_INIT_ERROR" + NL + "   * @param STRCODESTRING1 PHY Initialization failed" + NL + "   * @endcond" + NL + "   */" + NL + "   PHY_INIT_ERROR = 1," + NL + "  /**" + NL + "   * The Eth PHY register read fail." + NL + "   */" + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param ERRCODESTRING2 PHY_READ_ERROR" + NL + "   * @param STRCODESTRING2 PHY register read fail" + NL + "   * @endcond" + NL + "   */" + NL + "   PHY_READ_ERROR," + NL + "  /**" + NL + "   * The Eth PHY register write fail." + NL + "   */  " + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param ERRCODESTRING3 PHY_WRITE_ERROR" + NL + "   * @param STRCODESTRING3 PHY register write fail" + NL + "   * @endcond" + NL + "   */" + NL + "   PHY_WRITE_ERROR," + NL + "  /**" + NL + "   * PHY RESET FAIL" + NL + "   */" + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param ERRCODESTRING4 PHY_RESET_ERROR" + NL + "   * @param STRCODESTRING4 PHY reset fail" + NL + "   * @endcond" + NL + "   */" + NL + "   PHY_RESET_ERROR," + NL + "  /**" + NL + "   * Error disabling PHY interrupts" + NL + "   */  " + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param ERRCODESTRING5 PHY_DISABLE_INTR_ERROR" + NL + "   * @param STRCODESTRING5 Error disabling PHY interrupts" + NL + "   * @endcond" + NL + "   */" + NL + "   PHY_DISABLE_INTR_ERROR," + NL + "  /**" + NL + "   * Error setting Duplex Mode" + NL + "   */" + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param ERRCODESTRING6 PHY_MODE_SET_ERROR" + NL + "   * @param STRCODESTRING6 Error setting Duplex Mode" + NL + "   * @endcond" + NL + "   */" + NL + "   PHY_MODE_SET_ERROR," + NL + "  /**" + NL + "   * Error setting PHY Speed" + NL + "   */  " + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param ERRCODESTRING7 PHY_SPEED_SET_ERROR" + NL + "   * @param STRCODESTRING7 Error setting PHY Speed" + NL + "   * @endcond" + NL + "   */" + NL + "   PHY_SPEED_SET_ERROR," + NL + "  /**" + NL + "   * PHY not responding - Busy bit did not get cleared" + NL + "   */  " + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param ERRCODESTRING8 PHY_BUSY_BIT_NOT_CLEARED" + NL + "   * @param STRCODESTRING8 PHY Busy bit not cleared" + NL + "   * @endcond" + NL + "   */" + NL + "   PHY_BUSY_BIT_NOT_CLEARED," + NL + "  /**" + NL + "   * PHY Auto Negotiation complete" + NL + "   */  " + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param ERRCODESTRING9 PHY_AUTO_NEGO_COMPLETE" + NL + "   * @param STRCODESTRING9 PHY Auto Negotiation complete" + NL + "   * @endcond" + NL + "   */" + NL + "   PHY_AUTO_NEGO_COMPLETE," + NL + "  /**" + NL + "   * PHY Link is UP" + NL + "   */  " + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param ERRCODESTRING10 PHY_LINK_UP" + NL + "   * @param STRCODESTRING10 PHY Link is UP" + NL + "   * @endcond" + NL + "   */" + NL + "   PHY_LINK_UP," + NL + "  /**" + NL + "   * PHY Link is down" + NL + "   */  " + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param ERRCODESTRING11 PHY_LINK_DOWN" + NL + "   * @param STRCODESTRING11 PHY Link is down" + NL + "   * @endcond" + NL + "   */" + NL + "   PHY_LINK_DOWN," + NL + "  /**" + NL + "   * PHY Initialization successful" + NL + "   */  " + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param ERRCODESTRING12 PHY_INIT_SUCCSS" + NL + "   * @param STRCODESTRING12 PHY Initialization successful" + NL + "   * @endcond" + NL + "   */" + NL + "   PHY_INIT_SUCCSS," + NL + "  /**" + NL + "   * Debuglog Function Entry" + NL + "   */" + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param ERRCODESTRING13 SPI001_FUNCTION_ENTRY" + NL + "   * @param STRCODESTRING13 Entered function \\%s" + NL + "   * @endcond" + NL + "   */" + NL + "   ETH002_FUNCTION_ENTRY," + NL + "  /**" + NL + "   * Debuglog Function Exit" + NL + "   */" + NL + "  /**" + NL + "   * @cond INTERNAL_DOCS" + NL + "   * @param ERRCODESTRING14 ETH002_FUNCTION_EXIT" + NL + "   * @param STRCODESTRING14 Entered function \\%s" + NL + "   * @endcond" + NL + "   */" + NL + "   ETH002_FUNCTION_EXIT" + NL + "};" + NL + "" + NL + "/*GmacGmiiAddr             = 0x0010,    GMII address Register(ext. Phy) Layout          */" + NL + "enum GmacGmiiAddrReg      " + NL + "{" + NL + "  GmiiDevMask              = 0x0000F800,     /* (PA)GMII device address                 15:11     RW         0x00    */" + NL + "  GmiiDevShift             = 11," + NL + "" + NL + "  GmiiRegMask              = 0x000007C0,     /* (GR)GMII register in selected Phy       10:6      RW         0x00    */" + NL + "  GmiiRegShift             = 6," + NL + "  " + NL + "  GmiiCsrClkMask\t   = 0x0000003C,     /*CSR Clock bit Mask\t\t\t 5:2\t\t\t     */" + NL + "  GmiiCsrClk5              = 0x00000014,     /* (CR)CSR Clock Range     250-300 MHz      5:2      RW         000     */" + NL + "  GmiiCsrClk4              = 0x00000010,     /*                         150-250 MHz                                  */" + NL + "  GmiiCsrClk3              = 0x0000000C,     /*                         35-60 MHz                                    */" + NL + "  GmiiCsrClk2              = 0x00000008,     /*                         20-35 MHz                                    */" + NL + "  GmiiCsrClk1              = 0x00000004,     /*                         100-150 MHz                                  */" + NL + "  GmiiCsrClk0              = 0x00000000,     /*                         60-100 MHz                                   */" + NL + "" + NL + "  GmiiWrite                = 0x00000002,     /* (GW)Write to register                      1      RW                 */" + NL + "  GmiiRead                 = 0x00000000,     /* Read from register                                            0      */" + NL + "" + NL + "  GmiiBusy                 = 0x00000001,     /* (GB)GMII interface is busy                 0      RW          0      */" + NL + "};" + NL + "" + NL + "typedef void (*PHYTimerCallbackType)(u32 count);" + NL;
  protected final String TEXT_4 = " " + NL + " ";
  protected final String TEXT_5 = " " + NL + "/**" + NL + " * National PHY DP83848C" + NL + " */ " + NL + "#define PHY_National_DP83848C " + NL + "#define PHY_BASE_ADDRESS 0x1" + NL + "#define PHY_ID1_REGISTER 0x2000" + NL;
  protected final String TEXT_6 = NL + " ";
  protected final String TEXT_7 = NL + "/**" + NL + " * Micrel PHY KSZ8031R" + NL + " */" + NL + "#define PHY_Micrel_KSZ8031R  " + NL + "#define PHY_BASE_ADDRESS 0x0" + NL + "#define PHY_ID1_REGISTER 0x22";
  protected final String TEXT_8 = NL + NL + NL + NL + "/**" + NL + " * @}" + NL + " */" + NL + "" + NL + "/**" + NL + " * @addtogroup EthernetPHY_apidoc" + NL + " * @{" + NL + " */" + NL + "" + NL + "" + NL + "/**" + NL + " * @brief     Initializes Ethernet PHY" + NL + " * Syntax : status_t  PHY_InitializeDevice (void)" + NL + " *" + NL + " * Service ID:  0x1" + NL + " *" + NL + " * <b>Sync/Async:  Synchronous </b>" + NL + " *" + NL + " * <b>Reentrant:  No </b> <BR>" + NL + " *" + NL + " * @return    DAVEApp_SUCCESS on success error code otherwise." + NL + " *" + NL + " */" + NL + " /**" + NL + "* @code" + NL + "*  #include \"DAVE3.h\"" + NL + "*" + NL + "*  int main(void)" + NL + "* {" + NL + "*" + NL + "*       status_t Status = ETH_OPEN_ERROR;" + NL + "* \t    Status = PHY_InitializeDevice();" + NL + "*" + NL + "* \t      if (Status != DAVEApp_SUCCESS)" + NL + "* \t      {" + NL + "* \t        DBG002_ERROR(APP_GID, Status, 0, NULL);" + NL + "*" + NL + "* \t      }" + NL + "*" + NL + "*   }" + NL + "* @endcode<BR> </p>" + NL + "*/" + NL + "status_t  PHY_InitializeDevice (void);" + NL + "" + NL + "/**" + NL + " * @brief     The function returns Link status of Ethernet PHY" + NL + " * Syntax :   bool PHY_IsLinkUP(void)" + NL + " *" + NL + " * Service ID:  0x2" + NL + " *" + NL + " * <b>Sync/Async:  Synchronous </b>" + NL + " *" + NL + " * <b>Reentrant:  Yes </b> <BR>" + NL + " *" + NL + " * @return    true if Link is up false otherwise." + NL + " *" + NL + " */" + NL + " /**" + NL + "* @code" + NL + "*  #include \"DAVE3.h\"" + NL + "*  int main(void)" + NL + "* {" + NL + "*\tif( PHY_IsLinkUP() == FALSE)" + NL + "*    {" + NL + "*    }" + NL + "* }" + NL + "* @endcode<BR> </p>" + NL + "*/" + NL + "BOOLType PHY_IsLinkUP (void);" + NL + "" + NL + "/**" + NL + " * @}" + NL + " */" + NL + "" + NL + "#endif /* ETH_PHY_H_ */" + NL + NL;
  protected final String TEXT_9 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     App2JetInterface app = (App2JetInterface) argument; 
    stringBuffer.append(TEXT_1);
     String AppBaseuri1 = "app/eth002/";
    stringBuffer.append(TEXT_2);
    stringBuffer.append(app.getAppVersion(AppBaseuri1) );
    stringBuffer.append(TEXT_3);
     String AppBaseuri = "app/eth002/0";
     int physelected_national = app.getIntegerValue(AppBaseuri + "/eth002_phyvendor/" + 0 ); 
     int physelected_micrel = app.getIntegerValue(AppBaseuri + "/eth002_phyvendor/" + 1 ); 
    stringBuffer.append(TEXT_4);
     if (physelected_national == 1) { 
    stringBuffer.append(TEXT_5);
    } 
    stringBuffer.append(TEXT_6);
     if (physelected_micrel == 1) { 
    stringBuffer.append(TEXT_7);
    } 
    stringBuffer.append(TEXT_8);
    stringBuffer.append(TEXT_9);
    return stringBuffer.toString();
  }
}
