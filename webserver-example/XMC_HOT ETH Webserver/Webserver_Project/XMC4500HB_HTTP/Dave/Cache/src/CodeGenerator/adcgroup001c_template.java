package CodeGenerator;

import java.util.*;
import com.ifx.davex.appjetinteract.App2JetInterface;

public class adcgroup001c_template
{
  protected static String nl;
  public static synchronized adcgroup001c_template create(String lineSeparator)
  {
    nl = lineSeparator;
    adcgroup001c_template result = new adcgroup001c_template();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = NL + "/*CODE_BLOCK_BEGIN[ADCGROUP001.c]*/" + NL + "" + NL + "/*******************************************************************************" + NL + " Copyright (c) 2011, Infineon Technologies AG                                 **" + NL + " All rights reserved.                                                         **" + NL + "                                                                              **" + NL + " Redistribution and use in source and binary forms, with or without           **" + NL + " modification,are permitted provided that the following conditions are met:   **" + NL + "                                                                              **" + NL + " *Redistributions of source code must retain the above copyright notice,      **" + NL + " this list of conditions and the following disclaimer.                        **" + NL + " *Redistributions in binary form must reproduce the above copyright notice,   **" + NL + " this list of conditions and the following disclaimer in the documentation    **" + NL + " and/or other materials provided with the distribution.                       **" + NL + " *Neither the name of the copyright holders nor the names of its contributors **" + NL + " may be used to endorse or promote products derived from this software without**" + NL + " specific prior written permission.                                           **" + NL + "                                                                              **" + NL + " THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"  **" + NL + " AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **" + NL + " IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **" + NL + " ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **" + NL + " LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **" + NL + " CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **" + NL + " SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **" + NL + " INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **" + NL + " CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **" + NL + " ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **" + NL + " POSSIBILITY OF SUCH DAMAGE.                                                  **" + NL + "                                                                              **" + NL + " To improve the quality of the software, users are encouraged to share        **" + NL + " modifications, enhancements or bug fixes with Infineon Technologies AG       **" + NL + " dave@infineon.com).                                                          **" + NL + "                                                                              **" + NL + "********************************************************************************" + NL + "**                                                                            **" + NL + "**                                                                            **" + NL + "** PLATFORM : Infineon XMC4000 Series                                         **" + NL + "**                                                                            **" + NL + "** COMPILER : Compiler Independent                                            **" + NL + "**                                                                            **" + NL + "** AUTHOR   : DAVE App Developer                                              **" + NL + "**                                                                            **" + NL + "** MAY BE CHANGED BY USER [yes/no]: Yes                                       **" + NL + "**                                                                            **" + NL + "** MODIFICATION DATE : July 31, 2012                                          **" + NL + "**                                                                            **" + NL + "*******************************************************************************/" + NL + "" + NL + "/******************************************************************************" + NL + "**                      Author(s) Identity                                   **" + NL + "*******************************************************************************" + NL + "**                                                                           **" + NL + "** Initials     Name                                                         **" + NL + "** CM           DAVE App Developer                                           **" + NL + "** --------------------------------------------------------------------------**" + NL + "" + NL + "*******************************************************************************/" + NL + "" + NL + "" + NL + "/**" + NL + " * @file ADCGROUP001.c" + NL + " *" + NL + " * @brief This file contains ADCGROUP001 App API definitions" + NL + " *" + NL + " */" + NL + "" + NL + "/*******************************************************************************" + NL + " ** INCLUDE FILES                                                             **" + NL + " ******************************************************************************/" + NL + "#include <DAVE3.h>" + NL + "" + NL + "/**" + NL + " * @cond INTERNAL_DOCS" + NL + " */" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Private Type Definitions                              **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                 Private Function Declarations:" + NL + "*******************************************************************************/" + NL + "/**" + NL + " * @brief This function initializes the app." + NL + " *" + NL + " * @param [in] HandlePtr pointer to the Instance variable<BR>" + NL + " *" + NL + " * @return  NOne <BR>" + NL + " *" + NL + " * <b>Reentrancy:  Yes</b><BR>" + NL + " * <b>Sync/Async:  Synchronous</b><BR>" + NL + " */" + NL + "" + NL + "void ADCGROUP001_lInit(const ADCGROUP001_HandleType *HandlePtr );" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Global Constant Definitions                           **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Global Variable Definitions                           **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Private Constant Definitions                          **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                 Function like macro definitions                            **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Private Function Definitions                          **" + NL + "*******************************************************************************/" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Public Function Definitions                           **" + NL + "*******************************************************************************/" + NL + NL;
  protected final String TEXT_2 = NL + NL + "/** This function initializes the app */" + NL + "void ADCGROUP001_Init(void)" + NL + "{" + NL + "/*Initialize the global app */" + NL + "  ADCGLOB001_Init();";
  protected final String TEXT_3 = "    ";
  protected final String TEXT_4 = NL + "  ADCGROUP001_lInit(&";
  protected final String TEXT_5 = ");   ";
  protected final String TEXT_6 = NL + "  ADCGROUP001_lInit(&";
  protected final String TEXT_7 = ");   ";
  protected final String TEXT_8 = NL + "}" + NL + "" + NL + "/* " + NL + " * This Function initializes the adcgroup App. Local function is used to " + NL + " * initialize all the instances of the app." + NL + " */" + NL + "void ADCGROUP001_lInit(const ADCGROUP001_HandleType *HandlePtr )" + NL + "{" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;     " + NL + "  /* Pointer to the VADC Kernel Structure */   " + NL + "  VADC_GLOBAL_TypeDef *VADCGlobalPtr; " + NL + "  " + NL + "  VADCGlobalPtr = HandlePtr->VADCGlobalPtr;" + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "  " + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "  " + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_UNINITIALIZED))" + NL + "  {" + NL + "    " + NL + "    /* Set the Post calibration enable\\disable */" + NL + "    WR_REG(VADCGlobalPtr->GLOBCFG, VADC_GLOBCFG_DPCAL0_Msk, " + NL + "          ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + HandlePtr->kGroupNo)," + NL + "            HandlePtr->kPostCalibration);" + NL + "" + NL + "    /*  Converter is permanently on */" + NL + "    WR_REG(VADCGroupPtr->ARBCFG, VADC_G_ARBCFG_ANONC_Msk, " + NL + "           VADC_G_ARBCFG_ANONC_Pos, (uint32_t)HandlePtr->kAnalogConverterCtrl);" + NL + "" + NL + "    /* Set the Arbitration mode */" + NL + "    WR_REG(VADCGroupPtr->ARBCFG, VADC_G_ARBCFG_ARBM_Msk, VADC_G_ARBCFG_ARBM_Pos," + NL + "                                         (uint32_t)HandlePtr->kArbitrationMode);" + NL + "" + NL + "    /* Set the Group specific boundary 0 */" + NL + "    WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY0_Msk," + NL + "               VADC_G_BOUND_BOUNDARY0_Pos, (uint32_t)HandlePtr->kGrpBoundary0);" + NL + "    " + NL + "    /* Set the Group specific boundary 1 */" + NL + "    WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY1_Msk," + NL + "               VADC_G_BOUND_BOUNDARY1_Pos, (uint32_t)HandlePtr->kGrpBoundary1);" + NL + "                                                " + NL + "    /*" + NL + "     * Enable write control for EMUX configuration." + NL + "     * Set the EMUX coding scheme, EMUX mode, EMUX start select." + NL + "     */" + NL + "    VADCGroupPtr->EMUXCTR |= (uint32_t)((((uint32_t)1 << VADC_G_EMUXCTR_EMXWC_Pos) & VADC_G_EMUXCTR_EMXWC_Msk) | \\" + NL + "                                        (((uint32_t)HandlePtr->kEMUXCodeScheme \\" + NL + "                                                << VADC_G_EMUXCTR_EMXCOD_Pos) & VADC_G_EMUXCTR_EMXCOD_Msk) | \\" + NL + "                                        (((uint32_t)HandlePtr->kEMUXStartSelect  \\" + NL + "                                              << VADC_G_EMUXCTR_EMUXSET_Pos) & VADC_G_EMUXCTR_EMUXSET_Msk) | \\" + NL + "                                        (((uint32_t)HandlePtr->kEMUXMode \\" + NL + "                                              << VADC_G_EMUXCTR_EMUXMODE_Pos) & VADC_G_EMUXCTR_EMUXMODE_Msk));" + NL + "  " + NL + "    /*" + NL + "     * Set conversion mode, EMUX conversion mode, sample time control," + NL + "     * Set EMUX sample time control for class 0. " + NL + "     */" + NL + "    VADCGroupPtr->ICLASS[0] |= (uint32_t)((((uint32_t)HandlePtr->kConversionModeClass0 \\" + NL + "                                                << VADC_G_ICLASS_CMS_Pos) & VADC_G_ICLASS_CMS_Msk) | \\" + NL + "                                          (((uint32_t)HandlePtr->kEMUXConversionModeClass0 \\" + NL + "                                                << VADC_G_ICLASS_CME_Pos) & VADC_G_ICLASS_CME_Msk) | \\" + NL + "                                          (((uint32_t)HandlePtr->kSampleTimeControlClass0 \\" + NL + "                                                << VADC_G_ICLASS_STCS_Pos) & VADC_G_ICLASS_STCS_Msk) | \\" + NL + "                                          (((uint32_t)HandlePtr->kEMUXSampleTimeControlClass0 \\" + NL + "                                                << VADC_G_ICLASS_STCE_Pos) & VADC_G_ICLASS_STCE_Msk));" + NL + "                                                " + NL + "    /*" + NL + "     * Set conversion mode, EMUX conversion mode, sample time control,  " + NL + "     * EMUX sample time control for class 1. " + NL + "     */" + NL + "    VADCGroupPtr->ICLASS[1] |= (uint32_t)((((uint32_t)HandlePtr->kConversionModeClass1 \\" + NL + "                                                << VADC_G_ICLASS_CMS_Pos) & VADC_G_ICLASS_CMS_Msk) | \\" + NL + "                                          (((uint32_t)HandlePtr->kEMUXConversionModeClass1 \\" + NL + "                                                << VADC_G_ICLASS_CME_Pos) & VADC_G_ICLASS_CME_Msk) | \\" + NL + "                                          (((uint32_t)HandlePtr->kSampleTimeControlClass1 \\" + NL + "                                                << VADC_G_ICLASS_STCS_Pos) & VADC_G_ICLASS_STCS_Msk)  | \\" + NL + "                                          (((uint32_t)HandlePtr->kEMUXSampleTimeControlClass1 \\" + NL + "                                                    << VADC_G_ICLASS_STCE_Pos) & VADC_G_ICLASS_STCE_Msk));" + NL + "     /* Enable/Disable Startup Calibration */     " + NL + "    if(ADCGLOB001_StartUpCalibrationInit() == (uint32_t)DAVEApp_SUCCESS)" + NL + "    {" + NL + "      /* Set the App State to Initialized */" + NL + "      HandlePtr->DynamicHandlePtr->State = ADCGROUP001_INITIALIZED;" + NL + "    }" + NL + "    else" + NL + "    {" + NL + "      ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);  " + NL + "    }" + NL + "  }" + NL + "  else" + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }" + NL + "" + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "}" + NL + "" + NL + "/* This Function resets the adcgroup001 app */" + NL + "status_t ADCGROUP001_Deinit(const ADCGROUP001_HandleType *HandlePtr )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;            " + NL + "  /* Pointer to the VADC Kernel Structure */" + NL + "  VADC_GLOBAL_TypeDef *VADCGlobalPtr;     " + NL + "  " + NL + "  VADCGlobalPtr = HandlePtr->VADCGlobalPtr;" + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "  " + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    /* Reset the Post calibration enable\\disable */" + NL + "    CLR_BIT(VADCGlobalPtr->GLOBCFG, VADC_GLOBCFG_DPCAL0_Pos);" + NL + "  " + NL + "    /* Reset the Arbitration mode */" + NL + "    VADCGroupPtr->ARBCFG = (uint32_t)0x00;" + NL + "  " + NL + "    /* Reset the Group specific boundary */" + NL + "    VADCGroupPtr->BOUND = (uint32_t)0x00;" + NL + "  " + NL + "    /* ReSet the EMUX control register */" + NL + "    VADCGroupPtr->EMUXCTR = (uint32_t)(0X80000000);" + NL + "  " + NL + "    /* Reset class 0 input register*/" + NL + "    VADCGroupPtr->ICLASS[0] = (uint32_t)0x00;" + NL + "    /* Reset class 1 input register*/" + NL + "    VADCGroupPtr->ICLASS[1] = (uint32_t)0x00;" + NL + "  " + NL + "    /* Set the App State to Initialized */" + NL + "    HandlePtr->DynamicHandlePtr->State = ADCGROUP001_UNINITIALIZED;" + NL + "  " + NL + "    Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "  }" + NL + "  else" + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }" + NL + "" + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "" + NL + "/* This Function sets the group specific boundary 0 */" + NL + "status_t ADCGROUP001_SetGroupBound0(const ADCGROUP001_HandleType *HandlePtr," + NL + "                                                         uint16_t BoundaryValue)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "  " + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if(HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED)" + NL + "  {" + NL + "    if(BoundaryValue <= (uint16_t)ADCGROUP001_MAX_BOUNDARY_VALUE)" + NL + "    {" + NL + "      /* Set the Group specific boundary 0 */" + NL + "      WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY0_Msk, " + NL + "                           VADC_G_BOUND_BOUNDARY0_Pos, (uint32_t)BoundaryValue);  " + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else" + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }" + NL + "  }" + NL + "  else" + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }  " + NL + "" + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "" + NL + "/* This Function sets the group specific boundary 1 */" + NL + "status_t ADCGROUP001_SetGroupBound1(const ADCGROUP001_HandleType *HandlePtr," + NL + "                                                         uint16_t BoundaryValue)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "  " + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "  " + NL + "  if(HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED)" + NL + "  {" + NL + "    if(BoundaryValue <= (uint16_t)ADCGROUP001_MAX_BOUNDARY_VALUE)" + NL + "    {" + NL + "      /* Set the Group specific boundary 0 */" + NL + "      WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY1_Msk, " + NL + "                           VADC_G_BOUND_BOUNDARY1_Pos, (uint32_t)BoundaryValue);  " + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else" + NL + "    {" + NL + "      ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }" + NL + "  }" + NL + "  else" + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }  " + NL + "  " + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  " + NL + "  return Status;" + NL + "}" + NL + "" + NL + "" + NL + "/* This function activates group specific service request node */" + NL + "status_t ADCGROUP001_ActiveGroupServiceRequestNode(" + NL + "                          const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "  " + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))" + NL + "    {" + NL + "      /* Activate the Group specific service request node */" + NL + "      CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_AGSR0_Pos + (uint32_t)Node));" + NL + "      SET_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_AGSR0_Pos + (uint32_t)Node));" + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else " + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }" + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "   ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }" + NL + "  " + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/* This function deactivates group specific service request node */" + NL + "status_t ADCGROUP001_DeActiveGroupServiceRequestNode(" + NL + "                          const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "  " + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))" + NL + "    {" + NL + "      /* Deactivate the Group specific service request node */" + NL + "      CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_AGSR0_Pos + (uint32_t)Node));" + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;    " + NL + "    }" + NL + "    else " + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }" + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL); " + NL + "  }" + NL + "" + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/* This function activates the shared service request node. */" + NL + "status_t ADCGROUP001_ActiveSharedServiceRequestNode(" + NL + "                          const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "  " + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))" + NL + "    {" + NL + "      /* Activates the shared service request node. */" + NL + "      CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_ASSR0_Pos + (uint32_t)Node));" + NL + "      SET_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_ASSR0_Pos + (uint32_t)Node));    " + NL + "  " + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else " + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }" + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);    " + NL + "  }" + NL + "  " + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/* This deactivates the shared service request node.*/" + NL + "status_t ADCGROUP001_DeActiveSharedServiceRequestNode(" + NL + "                          const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "  " + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))" + NL + "    {" + NL + "      /* Deactivate the shared service request node.*/" + NL + "      CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_ASSR0_Pos + (uint32_t)Node));                          " + NL + "  " + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else " + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }" + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);    " + NL + "  }" + NL + "  " + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "" + NL + "/* This Function sets the value of EMUX start selection. */" + NL + "status_t ADCGROUP001_EMUXStartSelection(" + NL + "          const ADCGROUP001_HandleType *HandlePtr, uint8_t StartSelectionValue)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if( StartSelectionValue <= (uint8_t)ADCGROUP001_MAX_ADC_GROUP_CHANNEL)" + NL + "    {" + NL + "      /* Set the EMUX start selection */" + NL + "      WR_REG(VADCGroupPtr->EMUXCTR, VADC_G_EMUXCTR_EMUXSET_Msk," + NL + "                     VADC_G_EMUXCTR_EMUXSET_Pos, (uint32_t)StartSelectionValue);" + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else " + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }" + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }" + NL + "  " + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/* This function gets the value of EMUX start selection. */" + NL + "status_t ADCGROUP001_GetEMUXStartSelection(" + NL + "       const ADCGROUP001_HandleType *HandlePtr, uint8_t *StartSelectionValuePtr)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "  " + NL;
  protected final String TEXT_9 = "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if(StartSelectionValuePtr != NULL)" + NL + "    {" + NL + "      /* Get the EMUX start selection*/" + NL + "      *StartSelectionValuePtr = (uint8_t)RD_REG( VADCGroupPtr->EMUXCTR, " + NL + "                        VADC_G_EMUXCTR_EMUXSET_Msk, VADC_G_EMUXCTR_EMUXSET_Pos);" + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else " + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }" + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }" + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/* This function sets the value of EMUX channel select. */" + NL + "status_t ADCGROUP001_SetEMUXChannelSelect(" + NL + "          const ADCGROUP001_HandleType *HandlePtr, uint8_t ChannelSelectValue)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;                " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if( ChannelSelectValue <= (uint8_t)ADCGROUP001_TOTAL_ADC_CHANNEL )" + NL + "    {" + NL + "      /* Set the EMUX channel select*/" + NL + "      WR_REG(VADCGroupPtr->EMUXCTR, VADC_G_EMUXCTR_EMUXCH_Msk," + NL + "                       VADC_G_EMUXCTR_EMUXCH_Pos, (uint32_t)ChannelSelectValue);" + NL + "  " + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else" + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }" + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }" + NL + "  " + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/* This function sets the value of EMUX mode. */" + NL + "status_t ADCGROUP001_SetEMUXMode(const ADCGROUP001_HandleType *HandlePtr, " + NL + "                                                                  uint8_t Mode)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  uint32_t ModeTemp;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if(Mode <= (uint8_t)ADCGROUP001_SEQUENCEMODE)" + NL + "    {" + NL + "      /* Set the EMUX mode*/" + NL + "      ModeTemp = VADCGroupPtr->EMUXCTR;" + NL + "      ModeTemp &= (uint32_t)~(VADC_G_EMUXCTR_EMUXMODE_Msk);" + NL + "      ModeTemp |= (VADC_G_EMUXCTR_EMXWC_Msk) |" + NL + "                      (((uint32_t)Mode << VADC_G_EMUXCTR_EMUXMODE_Pos) & VADC_G_EMUXCTR_EMUXMODE_Msk);" + NL + "      VADCGroupPtr->EMUXCTR = ModeTemp;" + NL + "  " + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else " + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }" + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }" + NL + "  " + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "" + NL + "/* This function sets the value of EMUX coding scheme. */" + NL + "status_t ADCGROUP001_SetEMUXCodeScheme(const ADCGROUP001_HandleType *HandlePtr, " + NL + "                                                            uint8_t CodeScheme)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  uint32_t CodeSchemeTemp = (uint32_t)0;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "  " + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if(CodeScheme <= (uint8_t)ADCGROUP001_GRAYCODE)" + NL + "    {" + NL + "      /* Set the EMUX code scheme*/" + NL + "      CodeSchemeTemp = VADCGroupPtr->EMUXCTR;" + NL + "      CodeSchemeTemp &= (uint32_t)~(VADC_G_EMUXCTR_EMXCOD_Msk);" + NL + "      CodeSchemeTemp |= (VADC_G_EMUXCTR_EMXWC_Msk) |" + NL + "                    (((uint32_t)CodeScheme << VADC_G_EMUXCTR_EMXCOD_Pos) & VADC_G_EMUXCTR_EMXCOD_Msk);" + NL + "      VADCGroupPtr->EMUXCTR = CodeSchemeTemp;" + NL + "" + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else " + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }" + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }" + NL + "  " + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "/* This function sets the sample time for standard conversion mode */" + NL + "status_t ADCGROUP001_SetGroupClass0SampleTime(" + NL + "                                        const ADCGROUP001_HandleType *HandlePtr, " + NL + "                                                             uint8_t SampleTime)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "  " + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)" + NL + "    {" + NL + "      /* Set standard sample time control for class 0 */" + NL + "      WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_STCS_Msk," + NL + "                                 VADC_G_ICLASS_STCS_Pos, (uint32_t)SampleTime);" + NL + "  " + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else" + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }  " + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }" + NL + " " + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "" + NL + "/* This function sets the sample time for standard conversion mode */" + NL + "status_t ADCGROUP001_SetGroupClass1SampleTime(" + NL + "                                        const ADCGROUP001_HandleType *HandlePtr, " + NL + "                                                             uint8_t SampleTime)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "  " + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)" + NL + "    {" + NL + "      /* Set standard sample time control for class 1 */" + NL + "      WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_STCS_Msk," + NL + "                                 VADC_G_ICLASS_STCS_Pos, (uint32_t)SampleTime);                              " + NL + "  " + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else" + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }    " + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }" + NL + "  " + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "" + NL + "/* This function sets the sample time for EMUX conversion mode*/" + NL + "status_t ADCGROUP001_SetGroupClass0EmuxSampleTime(" + NL + "                                        const ADCGROUP001_HandleType *HandlePtr, " + NL + "                                        uint8_t SampleTime)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)" + NL + "    {" + NL + "      /* Set EMUX sample time control for class 0 */" + NL + "      WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_STCE_Msk," + NL + "                                 VADC_G_ICLASS_STCE_Pos, (uint32_t)SampleTime);" + NL + "  " + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else" + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }  " + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);  " + NL + "  }" + NL + "  " + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "" + NL + "/* This function sets the sample time for EMUX conversion mode*/" + NL + "status_t ADCGROUP001_SetGroupClass1EmuxSampleTime(" + NL + "                                        const ADCGROUP001_HandleType *HandlePtr, " + NL + "                                        uint8_t SampleTime)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)" + NL + "    {" + NL + "      /* Set EMUX sample time control for class 1 */" + NL + "      WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_STCE_Msk," + NL + "                                  VADC_G_ICLASS_STCE_Pos, (uint32_t)SampleTime);" + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else" + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }    " + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }" + NL + " " + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "" + NL + "/* This function sets the standard conversion mode in group class 0 */" + NL + "status_t ADCGROUP001_SetGroupClass0ConvMode(" + NL + "                                      const ADCGROUP001_HandleType *HandlePtr, " + NL + "                                      uint8_t ConversionModeVal)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||" + NL + "        (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))" + NL + "    {" + NL + "      /* Set conversion mode for class 0 */" + NL + "      WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_CMS_Msk," + NL + "                            VADC_G_ICLASS_CMS_Pos, (uint32_t)ConversionModeVal);" + NL + "  " + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else" + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }  " + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);   " + NL + "  }" + NL + "  " + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "" + NL + "/* This function sets the standard conversion mode */" + NL + "status_t ADCGROUP001_SetGroupClass1ConvMode(" + NL + "                                      const ADCGROUP001_HandleType *HandlePtr, " + NL + "                                      uint8_t ConversionModeVal)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "  " + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||" + NL + "        (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))" + NL + "    {" + NL + "      /* Set conversion mode for class 1 */" + NL + "      WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_CMS_Msk," + NL + "                            VADC_G_ICLASS_CMS_Pos, (uint32_t)ConversionModeVal);" + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else" + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }    " + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);    " + NL + "  }" + NL + "" + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "" + NL + "/* This function sets the emux conversion mode */" + NL + "status_t ADCGROUP001_SetGroupClass0EmuxConvMode(" + NL + "                                        const ADCGROUP001_HandleType *HandlePtr, " + NL + "                                        uint8_t ConversionModeVal" + NL + "                                          )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "" + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||" + NL + "        (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))" + NL + "    {" + NL + "      /* Set EMUX conversion mode for class 0 */" + NL + "      WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_CME_Msk," + NL + "                            VADC_G_ICLASS_CME_Pos, (uint32_t)ConversionModeVal);" + NL + "  " + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else" + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }  " + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);    " + NL + "  }" + NL + "" + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "" + NL + "/* This function sets the emux conversion mode */" + NL + "status_t ADCGROUP001_SetGroupClass1EmuxConvMode(" + NL;
  protected final String TEXT_10 = "                                        const ADCGROUP001_HandleType *HandlePtr, " + NL + "                                        uint8_t ConversionModeVal" + NL + "                                          )" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + " " + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||" + NL + "        (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))" + NL + "    {" + NL + "      /* Set EMUX conversion mode for class 1 */" + NL + "      WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_CME_Msk," + NL + "                           VADC_G_ICLASS_CME_Pos, (uint32_t)ConversionModeVal);" + NL + "  " + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else" + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }" + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL); " + NL + "  }" + NL + "" + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "" + NL + "/* This function sets the value of EMUX sample time control. */" + NL + "status_t ADCGROUP001_SetEMUXSampleTimeControl(" + NL + "                  const ADCGROUP001_HandleType *HandlePtr, uint8_t ControlValue)" + NL + "{" + NL + "  status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;" + NL + "  uint32_t SampleTimeCtrl;" + NL + "  /*Pointer to the VADC Structure */" + NL + "  VADC_G_TypeDef *VADCGroupPtr;              " + NL + "  VADCGroupPtr = HandlePtr->VADCGroupPtr;" + NL + "  " + NL + "  FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);" + NL + "" + NL + "  if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))" + NL + "  {" + NL + "    if(ControlValue <= (uint8_t)SET)" + NL + "    {" + NL + "      /* Set the EMUX sample time control */" + NL + "      SampleTimeCtrl = VADCGroupPtr->EMUXCTR;" + NL + "      SampleTimeCtrl &= (uint32_t)~(VADC_G_EMUXCTR_EMXST_Msk);" + NL + "      SampleTimeCtrl |= (VADC_G_EMUXCTR_EMXWC_Msk) | \\" + NL + "                    (((uint32_t)ControlValue << VADC_G_EMUXCTR_EMXST_Pos) & VADC_G_EMUXCTR_EMXST_Msk);" + NL + "      VADCGroupPtr->EMUXCTR = SampleTimeCtrl;" + NL + "  " + NL + "      Status = (uint32_t)DAVEApp_SUCCESS;" + NL + "    }" + NL + "    else " + NL + "    {" + NL + "      Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;" + NL + "    }" + NL + "  }" + NL + "  else  " + NL + "  {" + NL + "    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);" + NL + "  }" + NL + "" + NL + "  FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);" + NL + "  return Status;" + NL + "}" + NL + "" + NL + "" + NL + "/**" + NL + " * @endcond" + NL + " */" + NL + "/*CODE_BLOCK_END*/";
  protected final String TEXT_11 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     App2JetInterface app = (App2JetInterface) argument; 
    stringBuffer.append(TEXT_1);
     String AppBaseuri = "app/adcgroup001/"; 
     String Periuri = "http://www.infineon.com/0.1.31/Peripheral/vadc/"; 
     String appInst  = null; 
     String ConfigUri = null; 
     String kernelUri = null; 
     String kernelNo = null; 
     String slave[] = new String[7];
     int l = 0;
     int i = 0;
     String master[] = new String[7];
     int m = 0;
     int p = 0;
    stringBuffer.append(TEXT_2);
     ArrayList<String> appsList = (ArrayList<String>)(app.getApps("app/adcgroup001/"));
for (String appIns : appsList ) {
    appInst = appIns.substring(appIns.lastIndexOf("/")+1);
    if (app.getIntegerValue(AppBaseuri + appInst + "/adcgroup001_irwmasterorslave") == 1){
      slave[l]="ADCGROUP001_Handle"+appInst;
      l++;
    }else{
      master[m]="ADCGROUP001_Handle"+appInst;
      m++;
      }
    }
    stringBuffer.append(TEXT_3);
    for(i=0;i<l;i++){
    stringBuffer.append(TEXT_4);
    stringBuffer.append(slave[i]);
    stringBuffer.append(TEXT_5);
    }
    for(p=0;p<m;p++){
    stringBuffer.append(TEXT_6);
    stringBuffer.append(master[p]);
    stringBuffer.append(TEXT_7);
    }
    stringBuffer.append(TEXT_8);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(TEXT_11);
    return stringBuffer.toString();
  }
}
