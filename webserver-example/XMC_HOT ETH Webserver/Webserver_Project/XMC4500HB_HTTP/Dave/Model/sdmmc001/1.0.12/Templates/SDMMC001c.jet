<%@ jet package="CodeGenerator" class="sdmmc001c_template"
imports="com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>

/* CODE_BLOCK_BEGIN[SDMMC001.c] */

/*******************************************************************************
 Copyright (c) 2011, Infineon Technologies AG                                 **
 All rights reserved.                                                         **
                                                                              **
 Redistribution and use in source and binary forms, with or without           **
 modification,are permitted provided that the following conditions are met:   **
                                                                              **
 *Redistributions of source code must retain the above copyright notice,      **
 this list of conditions and the following disclaimer.                        **
 *Redistributions in binary form must reproduce the above copyright notice,   **
 this list of conditions and the following disclaimer in the documentation    **
 and/or other materials provided with the distribution.                       **
 *Neither the name of the copyright holders nor the names of its contributors **
 may be used to endorse or promote products derived from this software without** 
 specific prior written permission.                                           **
                                                                              **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
 POSSIBILITY OF SUCH DAMAGE.                                                  **
                                                                              **
 To improve the quality of the software, users are encouraged to share        **
 modifications, enhancements or bug fixes with Infineon Technologies AG       **
 dave@infineon.com).                                                          **
                                                                              **
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4000 Series                                         **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR : App Developer                                                     **
**                                                                            **
** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
**                                                                            **
** MODIFICATION DATE : July 31, 2012                                           **
**                                                                            **
*******************************************************************************/

/*******************************************************************************
**                       Author(s) Identity                                   **
********************************************************************************
**                                                                            **
** Initials    Name                                                           **
** ---------------------------------------------------------------------------**
** SK          App Developer                                                  **
*******************************************************************************/
<% String AppBaseuri = "app/sdmmc001/"; %>
<% int appInst = 0; %>
<% int RTOS = app.getIntegerValue(AppBaseuri + appInst + "/sdmmc001_rtos_present");
   String  Module_Name = "SDMMC001";
   String  Lld_Module_Name = "SDMMC003";
%>

<% 
  if (RTOS == 1)
  {
  	Lld_Module_Name = "SDMMC004";
    Module_Name = "SDMMC002";
  }
  else
  {
    Module_Name = "SDMMC001";
    Lld_Module_Name = "SDMMC003";
  }
%>

/**
 * @file   <%= Module_Name%>.c
 *
 * @brief  This file contains definitions of all private and public functions
 *         of SDMMC Block Layer App in Non-RTOS environment
 *
 */
 

/*******************************************************************************
**                      INCLUDE FILES                                         **
*******************************************************************************/
#include <DAVE3.h>

/**
 * @cond INTERNAL_DOCS
 */
/*******************************************************************************
**                      Global Variable Definitions                           **
*******************************************************************************/
/**
 * @ingroup <%= Module_Name%>_privateparam
 * @{
 */
/**
 * Global variable to hold SDMMC device initialization status. It is set to 1 if
 * SDMMC device is initialized.
 */
static uint8_t <%= Module_Name%>_InitializeFlag;
/**
 * Global variable to hold SDMMC device lock flag status. It is set to 1 if
 * SDMMC device is initialized but is locked.
 */
static uint8_t <%= Module_Name%>_LockFlag;
#ifdef <%= Module_Name%>_UVP_TEST
  bool  CardNotInit = FALSE;
#endif
/**
 * @}
 */
/**
 * @ingroup <%= Module_Name%>_privatefunc
 * @{
 */
/*******************************************************************************
**                     Private Function Declarations                           **
*******************************************************************************/
/**
 * @brief This function gets the Current Disk Status.
 * @return uint8_t \n
 * STA_NOINIT: Not Initialized\n
 * STA_NODISK: No card\n
 * STA_PROTECT: Card is write protected\n
 * <b>Reentrant: No </b><BR>
 * <b>Sync/Async: Synchronous</b>
 * @return <b>uint8_t</b><BR>
 */
uint8_t <%= Module_Name%>_lFindDiskStatus(void);

/**
 * @}
 */
/*******************************************************************************
**                     Private Function Definitions                           **
*******************************************************************************/
/*<<<DD_<%= Module_Name%>_nonAPI_1>>>*/
uint8_t <%= Module_Name%>_lFindDiskStatus()
{
  status_t Status;
  uint8_t DiskStatus = 0;
/* Get the Status Information */
  do
  {
 /* Get the Current State information . */
    Status = <%=Lld_Module_Name%>_GetCurrentState();
/*<<<DD_<%= Module_Name%>_nonAPI_1_1>>>*/
    if (Status & (uint32_t)<%=Lld_Module_Name%>_STATE_NO_CARD )
    {
      DiskStatus = (<%= Module_Name%>_STA_NOINIT | <%= Module_Name%>_STA_NODISK);
      break;
    }/* End of "if ((Status & <%=Lld_Module_Name%>_STATE_CARD_INSERTED) == 0)"		*/
/*<<<DD_<%= Module_Name%>_nonAPI_1_2>>>*/
    if ((Status & (uint32_t)<%=Lld_Module_Name%>_STATE_CARD_INITIALIZED) == 0)
    {
      DiskStatus |= <%= Module_Name%>_STA_NOINIT;
      break;
    }/* End of "if ((Status & <%=Lld_Module_Name%>_STATE_CARD_INITIALIZED) == 0)"	*/
    if (( Status & (uint32_t)<%= Lld_Module_Name%>_STATE_CARD_LOCKED) != 0 )
    {
      <%= Module_Name%>_LockFlag = 1;
      DiskStatus |= <%= Module_Name%>_STA_NOINIT;
      break;
    }/* End of "if ((Status & (uint32_t)<%= Lld_Module_Name%>_STATE_CARD_LOCKED) == 0)" */
/*<<<DD_<%= Module_Name%>_nonAPI_1_3>>>*/
    if ((Status & (uint32_t)<%=Lld_Module_Name%>_STATE_CARD_WRITE_PROTECT) != 0)
    {
      DiskStatus |= <%= Module_Name%>_STA_PROTECT;
    }/* End of "if ((Status & <%=Lld_Module_Name%>_STATE_CARD_WRITE_PROTECT) != 0)"	*/
  } while(0);
  return DiskStatus;
}


/**
 * @endcond
 */
/*******************************************************************************
**                     Public Function Definitions                            **
*******************************************************************************/

/*<<<DD_<%= Module_Name%>_API_1>>>*/
/*
 * The function checks and returns the initialization status of the card .
 */
uint8_t <%= Module_Name%>_Initialize(void)
{
  status_t Status;
  uint8_t DiskStatus ;
  FUNCTION_ENTRY(GID_<%= Module_Name%>, (uint32_t)<%= Module_Name%>_FUNCTION_ENTRY);
  do
  {
#ifdef <%= Module_Name%>_UVP_TEST
    if (CardNotInit == TRUE)
    {
      <%= Module_Name%>_InitializeFlag =1 ;
    }
#endif
    /* Check the device initialization status. If SDMMC device is
     * already initialized, Skip this step else initialize Sdmmc device */
    if ( <%= Module_Name%>_InitializeFlag == 0)
    {
      Status = <%= Lld_Module_Name%>_Start();
      if ( (Status != (uint32_t)DAVEApp_SUCCESS) &&  \
           (Status != (uint32_t)<%= Lld_Module_Name%>_HOST_CONTROLLER_INITIALIZED))
      {
        break;
      }
      Status = <%= Lld_Module_Name%>_CardDetectionSupport();
      if (Status != (uint32_t)DAVEApp_SUCCESS )
      {
        if (Status == (uint32_t)<%= Lld_Module_Name%>_INITIALIZED_BUT_LOCKED)
        {
          <%= Module_Name%>_LockFlag = 1;
        }
        break;
      }
      <%= Module_Name%>_InitializeFlag = 1; 
    }
  } while(0);
/* Debug Log Message */
  DiskStatus =  <%= Module_Name%>_lFindDiskStatus();
  ERROR(GID_<%= Module_Name%>,Status,0,0);
  FUNCTION_EXIT(GID_<%= Module_Name%>, (uint32_t)<%= Module_Name%>_FUNCTION_EXIT);
  return DiskStatus;
}

/*<<<DD_<%= Module_Name%>_API_2>>>*/
/*
 * The function gets the status of the card whether the card is initialized,
 * inserted or write protected.
 */
uint8_t <%= Module_Name%>_GetStatus(void)
{
  uint8_t  DiskStatus;
  FUNCTION_ENTRY(GID_<%= Module_Name%>,(uint32_t)<%= Module_Name%>_FUNCTION_ENTRY);
  DiskStatus  = <%= Module_Name%>_Initialize();
  FUNCTION_EXIT(GID_<%= Module_Name%>, (uint32_t)<%= Module_Name%>_FUNCTION_EXIT);
  return DiskStatus;
}

/* <<<DD_<%= Module_Name%>_API_3>>>*/
/*
 * The function reads the data from the card.
 */
uint32_t <%= Module_Name%>_ReadBlock
(
  uint8_t *ReadBuf,
  uint32_t SectorNumber,
  uint8_t  SectorCount
)
{
  status_t Status;
  uint8_t DiskStatus;
  uint32_t Result;
  FUNCTION_ENTRY(GID_<%= Module_Name%>, (uint32_t)<%= Module_Name%>_FUNCTION_ENTRY);
/* Check the status before reading data */
  DiskStatus = <%= Module_Name%>_GetStatus();
/*<<<DD_<%= Module_Name%>_API_3_1>>>*/
  if ((DiskStatus & (uint8_t)<%= Module_Name%>_STA_NOINIT) != 0)
  {
    Result = <%= Module_Name%>_RES_NOTRDY;
    ERROR(GID_<%= Module_Name%>,Result,0,0);
  }
  else
  {
/*Check for single block read or multiple block read based on sector count */
/*<<<DD_<%= Module_Name%>_API_3_2>>>*/
    if (SectorCount == 1)
    {
      Status = <%=Lld_Module_Name%>_CardReadSingleBlock( (uint32_t *)ReadBuf, SectorNumber);
    }
/*<<<DD_<%= Module_Name%>_API_3_3>>>*/
    else
    {
      Status = <%=Lld_Module_Name%>_CardReadMultipleBlocks((uint32_t *)ReadBuf,SectorNumber, \
                                                SectorCount);
    }/*End of "if (SectorCount == 1)"*/
/*<<<DD_<%= Module_Name%>_API_3_4>>>*/
    if (Status == (uint32_t)DAVEApp_SUCCESS)
    {
      Result = <%= Module_Name%>_RES_OK;
    }
/*<<<DD_<%= Module_Name%>_API_3_5>>>*/
    else
    {
      Result = <%= Module_Name%>_RES_ERROR;
      ERROR(GID_<%= Module_Name%>,<%= Module_Name%>_SDMMC00x_ERROR,sizeof(int),Status);
    }/* End of "if (Status == (uint32_t)DAVEApp_SUCCESS)"*/
  }/* End of " if ((DiskStatus & (uint8_t)STA_NOINIT) != 0)"*/
  FUNCTION_EXIT(GID_<%= Module_Name%>, (uint32_t)<%= Module_Name%>_FUNCTION_EXIT);
  return Result;
}

/*<<<DD_<%= Module_Name%>_API_4>>>*/
/*
 * The function writes the data on the card.
 */
uint32_t <%= Module_Name%>_WriteBlock
(
  const uint8_t *WriteBuf,
  uint32_t SectorNumber,
  uint8_t SectorCount
)
{
  status_t Status ;
  uint8_t DiskStatus;
  uint32_t Result;
  FUNCTION_ENTRY(GID_<%= Module_Name%>, (uint32_t)<%= Module_Name%>_FUNCTION_ENTRY);

  do
  {
    DiskStatus = <%= Module_Name%>_GetStatus ();
/*<<<DD_<%= Module_Name%>_API_4_1>>>*/
/* If the card is not initialized */
    if ((DiskStatus & <%= Module_Name%>_STA_NOINIT) != 0)
    {
      Result = <%= Module_Name%>_RES_NOTRDY;
      ERROR(GID_<%= Module_Name%>,Result,0,0);
      break;
    }/* End of "if ((DiskStatus & <%= Module_Name%>_STA_NOINIT) != 0)"*/
/* If the card is read only or write protected */
/*<<<DD_<%= Module_Name%>_API_4_2>>>*/
    if ((DiskStatus & <%= Module_Name%>_STA_PROTECT) != 0)
    {
      Result = <%= Module_Name%>_RES_WRPRT;
      ERROR(GID_<%= Module_Name%>,Result,0,0);
      break;
    }/* End of "if ((DiskStatus & <%= Module_Name%>_STA_PROTECT) != 0)"*/
/*Check for single block write or multiple block write.*/
/*<<<DD_<%= Module_Name%>_API_4_3>>>*/
    if (SectorCount == 1)
    {
      Status = <%=Lld_Module_Name%>_CardWriteSingleBlock((uint32_t *)WriteBuf, SectorNumber);
    }
/*<<<DD_<%= Module_Name%>_API_4_4>>>*/
    else
    {
      Status = <%=Lld_Module_Name%>_CardWriteMultipleBlocks((uint32_t *)WriteBuf,\
                                                 SectorNumber, SectorCount );
    } /* End of "if (SectorCount == 1)"*/
/*<<<DD_<%= Module_Name%>_API_4_5>>>*/
    if (Status == (uint32_t)DAVEApp_SUCCESS)
    {
      Result = <%= Module_Name%>_RES_OK;
    }
/*<<<DD_<%= Module_Name%>_API_4_6>>>*/
    else
    {
      Result = <%= Module_Name%>_RES_ERROR;
      ERROR(GID_<%= Module_Name%>,<%= Module_Name%>_SDMMC00x_ERROR,0,0);
    } /* End of "if (Status == (uint32_t)DAVEApp_SUCCESS)"*/
  } while(0);
  FUNCTION_EXIT(GID_<%= Module_Name%>, (uint32_t)<%= Module_Name%>_FUNCTION_EXIT);
  return Result;
}

/*<<<DD_<%= Module_Name%>_API_5>>>*/
/*
 * The function performs the various IOCTL operation.
 */
uint32_t <%= Module_Name%>_Ioctl
(
  uint8_t Command,
  void *Buffer
)
{
  status_t Status = (uint32_t)<%= Module_Name%>_ERROR;
  uint8_t DiskStatus;
  uint32_t Result;
  <%= Module_Name%>_EraseAddrType *ErasePtr;
  const <%= Module_Name%>_PasswdType *PasswdPtr;
  <%=Lld_Module_Name%>_LocalLockStructType LockStruct = {0};
  FUNCTION_ENTRY(GID_<%= Module_Name%>, (uint32_t)<%= Module_Name%>_FUNCTION_ENTRY);
  do
  {
    DiskStatus = <%= Module_Name%>_GetStatus();
/*<<<DD_<%= Module_Name%>_API_5_1>>>*/
/* If card is not initialized or inserted */
    if ((DiskStatus & (uint8_t)<%= Module_Name%>_STA_NOINIT) != 0)
    {
      if (<%= Module_Name%>_LockFlag == 1UL)
      {
        Status = (uint32_t)<%= Module_Name%>_DISK_LOCKED;
        if ( (Command != <%= Module_Name%>_MMC_UNLOCK_CARD) &&
           (Command != <%= Module_Name%>_MMC_SET_PASSWD) &&
           (Command != <%= Module_Name%>_MMC_CLEAR_PASSWD) &&
           (Command != <%= Module_Name%>_MMC_SET_LOCK) &&
           (Command != <%= Module_Name%>_MMC_READ_LOCK_STATUS) &&
           (Command != <%= Module_Name%>_MMC_FORCE_ERASE) &&
           (Command != <%= Module_Name%>_CTRL_EJECT) )
        {
          ERROR(GID_SDMMC001,Status,0,0);
          break;
        }
      }
      else
      {
        Status = (uint32_t)<%= Module_Name%>_RES_NOTRDY;
        ERROR(GID_SDMMC001,Status,0,0);
        break;
      }
    }
/* Switch to the respective IOCTL command */
    switch (Command)
    {
/*<<<DD_<%= Module_Name%>_API_5_2>>>*/
      case <%= Module_Name%>_CTRL_SYNC:
        Status = <%=Lld_Module_Name%>_FlushDiskWriteCache();
        break;

      case <%= Module_Name%>_GET_SECTOR_SIZE:
        Status = <%=Lld_Module_Name%>_GetSectorSize(Buffer);
		break;
		 
/*<<<DD_<%= Module_Name%>_API_5_3>>>*/
      case <%= Module_Name%>_GET_SECTOR_COUNT:
        Status = <%=Lld_Module_Name%>_GetSectorCount( Buffer );
        break;

/*<<<DD_<%= Module_Name%>_API_5_4>>>*/
      case <%= Module_Name%>_CTRL_ERASE_SECTOR:
        ErasePtr = (<%= Module_Name%>_EraseAddrType *) Buffer;
        Status = <%=Lld_Module_Name%>_EraseBlock( (ErasePtr->StartAddress),
                                      (ErasePtr->EndAddress));
        break;

/*<<<DD_<%= Module_Name%>_API_5_5>>>*/
      case <%= Module_Name%>_GET_BLOCK_SIZE:
        Status = <%=Lld_Module_Name%>_GetBlockSize(Buffer);
        break;

/*<<<DD_<%= Module_Name%>_API_5_6>>>*/
      case <%= Module_Name%>_MMC_GET_TYPE:
        Status = <%=Lld_Module_Name%>_GetCardType(Buffer);
        break;

/*<<<DD_<%= Module_Name%>_API_5_7>>>*/
      case <%= Module_Name%>_MMC_GET_CSD:
        Status = <%=Lld_Module_Name%>_GetCsd(Buffer);
        break;

/*<<<DD_<%= Module_Name%>_API_5_8>>>*/
      case <%= Module_Name%>_MMC_GET_CID:
        Status = <%=Lld_Module_Name%>_GetCid(Buffer);
        break;

/*<<<DD_<%= Module_Name%>_API_5_8>>>*/
      case <%= Module_Name%>_MMC_GET_OCR:
        Status = <%=Lld_Module_Name%>_GetOcr(Buffer);
        break;

/*<<<DD_<%= Module_Name%>_API_5_10>>>*/
      case <%= Module_Name%>_MMC_GET_SDSTAT:
        Status = <%=Lld_Module_Name%>_GetSdStatus(Buffer);
        break;

/*<<<DD_<%= Module_Name%>_API_5_11>>>*/
      case <%= Module_Name%>_MMC_LOCK_CARD:
        LockStruct.Mode = 0x04UL;
        PasswdPtr = (const <%= Module_Name%>_PasswdType *)Buffer;
        /* Check password length doesn't exceeds the permitted length */
        /*<<<DD_<%= Module_Name%>_API_5_11_1>>>*/
        if( PasswdPtr->OldPwdLength > <%= Module_Name%>_MAX_PASSWD_LEN )
        {
          break;
        }
        LockStruct.PwdLen = PasswdPtr->OldPwdLength;
        memcpy(LockStruct.PwdData, PasswdPtr->OldPassword, \
               (uint32_t)LockStruct.PwdLen);
        Status = <%=Lld_Module_Name%>_LockUnlockCard(&LockStruct, <%=Lld_Module_Name%>_LOCK);
        break;

/*<<<DD_<%= Module_Name%>_API_5_12>>>*/
      case <%= Module_Name%>_MMC_UNLOCK_CARD:
        LockStruct.Mode = 0x00UL;
        PasswdPtr = (const <%= Module_Name%>_PasswdType *)Buffer;
        /* Check password length doesn't exceeds the permitted length */
        /*<<<DD_<%= Module_Name%>_API_5_12_1>>>*/
        if( PasswdPtr->OldPwdLength > <%= Module_Name%>_MAX_PASSWD_LEN )
        {
          break;
        }
        LockStruct.PwdLen = PasswdPtr->OldPwdLength;
        memcpy(LockStruct.PwdData,PasswdPtr->OldPassword, LockStruct.PwdLen);
        Status  = <%=Lld_Module_Name%>_LockUnlockCard(&LockStruct,  \
                                          <%=Lld_Module_Name%>_UNLOCK);
        break;

/*<<<DD_<%= Module_Name%>_API_5_13>>>*/
      case <%= Module_Name%>_MMC_SET_PASSWD:
/*Fill the local lock structure with the information provided*/
        LockStruct.Mode  = 0x01UL;
        PasswdPtr = (const <%= Module_Name%>_PasswdType *)Buffer;
        /* Check password length doesn't exceeds the permitted length */
        /*<<<DD_<%= Module_Name%>_API_5_13_1>>>*/
        if( (PasswdPtr->OldPwdLength > <%= Module_Name%>_MAX_PASSWD_LEN) ||
            (PasswdPtr->NewPwdLength > <%= Module_Name%>_MAX_PASSWD_LEN ))
        {
          break;
        }
        LockStruct.PwdLen = PasswdPtr->OldPwdLength + PasswdPtr->NewPwdLength;

        memcpy(LockStruct.PwdData, PasswdPtr->OldPassword, \
                PasswdPtr->OldPwdLength );
        memcpy(LockStruct.PwdData + PasswdPtr->OldPwdLength, \
               PasswdPtr->NewPassword, PasswdPtr->NewPwdLength );

        Status = <%=Lld_Module_Name%>_LockUnlockCard(&LockStruct, \
                                          <%=Lld_Module_Name%>_UNLOCK);
        break;

/*<<<DD_<%= Module_Name%>_API_5_14>>>*/
      case <%= Module_Name%>_MMC_CLEAR_PASSWD:
        LockStruct.Mode  = 0x02UL;
        PasswdPtr = (const <%= Module_Name%>_PasswdType *)Buffer;
        /* Check password length doesn't exceeds the permitted length */
        /*<<<DD_<%= Module_Name%>_API_5_14_1>>>*/
        if( PasswdPtr->OldPwdLength > <%= Module_Name%>_MAX_PASSWD_LEN )
        {
          break;
        }
        LockStruct.PwdLen =  PasswdPtr->OldPwdLength;
        memcpy(LockStruct.PwdData, PasswdPtr ->OldPassword, \
               LockStruct.PwdLen);
        Status = <%=Lld_Module_Name%>_LockUnlockCard(&LockStruct,<%=Lld_Module_Name%>_UNLOCK);
        break;

/*<<<DD_<%= Module_Name%>_API_5_15>>>*/
      case <%= Module_Name%>_MMC_SET_LOCK:
        LockStruct.Mode  = 0x05UL;
        PasswdPtr = (const <%= Module_Name%>_PasswdType *)Buffer;
        /*<<<DD_<%= Module_Name%>_API_5_15_1>>>*/
        /* Check password length doesn't exceeds the permitted length */
        if( PasswdPtr->OldPwdLength > <%= Module_Name%>_MAX_PASSWD_LEN )
        {
          break;
        }
        LockStruct.PwdLen =  PasswdPtr->OldPwdLength + PasswdPtr->NewPwdLength;
        memcpy(LockStruct.PwdData, PasswdPtr->OldPassword,PasswdPtr->OldPwdLength );
        memcpy(LockStruct.PwdData + PasswdPtr->OldPwdLength, \
                       PasswdPtr->NewPassword, PasswdPtr->NewPwdLength );
        Status  = <%=Lld_Module_Name%>_LockUnlockCard(&LockStruct, <%=Lld_Module_Name%>_LOCK);
        break;

/*<<<DD_<%= Module_Name%>_API_5_16>>>*/
      case <%= Module_Name%>_MMC_READ_LOCK_STATUS:
        Status = <%=Lld_Module_Name%>_GetLockStatus((uint32_t *)Buffer);
        break;

/*<<<DD_<%= Module_Name%>_API_5_17>>>*/
      case <%= Module_Name%>_MMC_FORCE_ERASE:
        LockStruct.Mode = 0x08UL;
        Status = <%=Lld_Module_Name%>_LockUnlockCard(&LockStruct, <%=Lld_Module_Name%>_UNLOCK);
        break;

/*<<<DD_<%= Module_Name%>_API_5_18>>>*/
      case <%= Module_Name%>_CTRL_EJECT:
        Status = <%=Lld_Module_Name%>_EjectCard();
        break;

      default:
        Result = <%= Module_Name%>_RES_PARERR;
        break;
     }
  } while (0);

/*<<<DD_<%= Module_Name%>_API_5_18>>>*/
  if (Status == (uint32_t)DAVEApp_SUCCESS)
  {
    Result = <%= Module_Name%>_RES_OK;
  }
/*<<<DD_<%= Module_Name%>_API_5_19>>>*/
  else
  {
    Result = <%= Module_Name%>_RES_ERROR;
    ERROR(GID_<%= Module_Name%>,<%= Module_Name%>_SDMMC00x_ERROR,sizeof(int),Status);
  }
  FUNCTION_EXIT(GID_<%= Module_Name%>, (uint32_t)<%= Module_Name%>_FUNCTION_EXIT);
  return Result;
}

/*CODE_BLOCK_END*/




