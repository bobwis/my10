package CodeGenerator;

import java.util.*;
import com.ifx.davex.appjetinteract.App2JetInterface;

public class reset001c_template
{
  protected static String nl;
  public static synchronized reset001c_template create(String lineSeparator)
  {
    nl = lineSeparator;
    reset001c_template result = new reset001c_template();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*CODE_BLOCK_BEGIN[RESET001.c]*/" + NL + "" + NL + "/*******************************************************************************" + NL + " Copyright (c) 2011, Infineon Technologies AG                                 **" + NL + " All rights reserved.                                                         **" + NL + "                                                                              **" + NL + " Redistribution and use in source and binary forms, with or without           **" + NL + " modification,are permitted provided that the following conditions are met:   **" + NL + "                                                                              **" + NL + " *Redistributions of source code must retain the above copyright notice,      **" + NL + " this list of conditions and the following disclaimer.                        **" + NL + " *Redistributions in binary form must reproduce the above copyright notice,   **" + NL + " this list of conditions and the following disclaimer in the documentation    **" + NL + " and/or other materials provided with the distribution.                       **" + NL + " *Neither the name of the copyright holders nor the names of its contributors **" + NL + " may be used to endorse or promote products derived from this software without** " + NL + " specific prior written permission.                                           **" + NL + "                                                                              **" + NL + " THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"  **" + NL + " AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **" + NL + " IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **" + NL + " ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **" + NL + " LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **" + NL + " CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **" + NL + " SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **" + NL + " INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **" + NL + " CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **" + NL + " ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **" + NL + " POSSIBILITY OF SUCH DAMAGE.                                                  **" + NL + "                                                                              **" + NL + " To improve the quality of the software, users are encouraged to share        **" + NL + " modifications, enhancements or bug fixes with Infineon Technologies AG       **" + NL + " dave@infineon.com).                                                          **" + NL + "                                                                              **" + NL + "********************************************************************************" + NL + "**                                                                            **" + NL + "**                                                                            **" + NL + "** PLATFORM : Infineon XMC4000 Series   \t\t\t              **" + NL + "**                                                                            **" + NL + "** COMPILER : Compiler Independent                                            **" + NL + "**                                                                            **" + NL + "** AUTHOR   : App Developer                                                   **" + NL + "**                                                                            **" + NL + "** MAY BE CHANGED BY USER [yes/no]: Yes                                       **" + NL + "**                                                                            **" + NL + "** MODIFICATION DATE : Nov 22, 2012                                           **" + NL + "**                                                                            **" + NL + "*******************************************************************************/" + NL + "" + NL + "/******************************************************************************" + NL + "**                      Author(s) Identity                                   **" + NL + "*******************************************************************************" + NL + "**                                                                           **" + NL + "** Initials     Name                                                         **" + NL + "** --------------------------------------------------------------------------**" + NL + "** BT         App Developer                                                  **" + NL + "**                                                                           **" + NL + "*******************************************************************************/" + NL + "/**" + NL + " * @file RESET001.c" + NL + " * " + NL + " * @App    Version RESET001 <";
  protected final String TEXT_2 = ">" + NL + " *" + NL + " * @brief  Reset App implementation." + NL + " *" + NL + " */" + NL + "/*******************************************************************************" + NL + " ** INCLUDE FILES                                                             **" + NL + " ******************************************************************************/" + NL + "" + NL + "" + NL + "/** Inclusion of header file */" + NL + "#include <DAVE3.h>" + NL + "" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Private Macro Definitions                             **" + NL + "*******************************************************************************/" + NL + "/* Invalid Input */" + NL + "#define RCU_INVALID_INPUT  0x0000000FU" + NL + "/** To check bit value is 1 */ " + NL + "#define RCU_SET   1U" + NL + "/** To check bit value is 0 */" + NL + "#define RCU_RESET   0U" + NL + "/** Clear BitMask  */" + NL + "#define CLEAR_BITMASK\t0xF0000000U" + NL + "/** Reset BitMask */" + NL + "#define RESET_BITMASK   0x0FFFFFFFU" + NL + "" + NL + "/** @ingroup RESET001 Func" + NL + " * @{" + NL + " */" + NL + "" + NL + "/*******************************************************************************" + NL + "**                      Public Function Definitions                           **" + NL + "*******************************************************************************/" + NL + "" + NL + "" + NL + "/** @ingroup RESET001 Func" + NL + " * @{" + NL + " */" + NL + " " + NL + " /* This function is to enable reset of peripheral by software  */" + NL + " " + NL + " void RESET001_AssertReset(RESET001_ResetnType Resetn)" + NL + " {" + NL + "  uint32_t* RCUControlReg = 0U;" + NL + "  uint32_t Temp = 0U ;" + NL + "  /* <<<DD_RESET001_API_1>>> */" + NL + "  SCU_RESET_TypeDef* RCUCtrlReg = SCU_RESET;" + NL + "  Temp = ((uint32_t)Resetn & CLEAR_BITMASK) >> 28;" + NL + "  RCUControlReg = (uint32_t*)((uint32_t)(&RCUCtrlReg->PRSET0) + ( 0x0000000CU * Temp));" + NL + "  *RCUControlReg = ((uint32_t)Resetn & RESET_BITMASK );" + NL + "}" + NL + "" + NL + "/* API to get the  reason of last reset */\t" + NL + "" + NL + "void RESET001_DeassertReset(RESET001_ResetnType Resetn)" + NL + "{" + NL + "  uint32_t* RCUControlReg = 0UL;" + NL + "  uint32_t Temp = 0UL;" + NL + "  /* <<<DD_RESET001_API_2>>> */" + NL + "  SCU_RESET_TypeDef* RCUCtrlReg = SCU_RESET;  " + NL + "  Temp = ((uint32_t)Resetn & CLEAR_BITMASK) >> 28;" + NL + "  RCUControlReg = (uint32_t*)((uint32_t)(&RCUCtrlReg->PRCLR0) + ( 0x0000000CU * Temp));" + NL + "  *RCUControlReg = ((uint32_t)Resetn & RESET_BITMASK) ;" + NL + "}" + NL + "\t" + NL + "/* API to get the  reason of last reset. */" + NL + "RESET001_InfoType RESET001_GetResetInfo()" + NL + "{" + NL + "  SCU_RESET_TypeDef* RCUCtrlReg = SCU_RESET;" + NL + " /* <<<DD_RESET001_API_4>>> */" + NL + "  return (RESET001_InfoType)(RCUCtrlReg->RSTSTAT  &  SCU_RESET_RSTSTAT_RSTSTAT_Msk);" + NL + "}" + NL + "\t\t" + NL + "/* Get the reset status of the peripheral */\t\t" + NL + "status_t RESET001_GetStatus(RESET001_ResetnType Resetn)" + NL + "{" + NL + "  uint32_t status = RCU_INVALID_INPUT;" + NL + "  uint32_t* RCUControlReg = 0U;" + NL + "  uint32_t Temp = 0U;" + NL + "  uint32_t Getstatus = 0U;" + NL + "  /* <<<DD_RESET001_API_3>>> */" + NL + "  SCU_RESET_TypeDef* RCUCtrlReg = SCU_RESET;" + NL + "  Temp = ((uint32_t)Resetn & CLEAR_BITMASK) >> 28;\t" + NL + "  RCUControlReg = (uint32_t*)((uint32_t)(&RCUCtrlReg->PRSTAT0) + ( 0x0000000CU * Temp));" + NL + "  Getstatus\t = (uint32_t)((*RCUControlReg) & (uint32_t)Resetn & RESET_BITMASK) ;" + NL + "  if(Getstatus != 0U)" + NL + "  {" + NL + "\t  status = RCU_SET;" + NL + "  }" + NL + "  else" + NL + "  {" + NL + "\t  status = RCU_RESET;" + NL + "  }" + NL + "  return status;" + NL + "}" + NL + " " + NL + " " + NL + "/**" + NL + "*@}" + NL + "*/" + NL + "" + NL + "/*CODE_BLOCK_END*/";
  protected final String TEXT_3 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     App2JetInterface app = (App2JetInterface) argument; 
     String AppBaseuri = "app/reset001/"; 
    stringBuffer.append(TEXT_1);
    stringBuffer.append( app.getAppVersion(AppBaseuri));
    stringBuffer.append(TEXT_2);
    stringBuffer.append(TEXT_3);
    return stringBuffer.toString();
  }
}
