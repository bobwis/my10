<%@ jet package="CodeGenerator" class="ffconfh_template"
imports="com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>

/*CODE_BLOCK_BEGIN[ffconf.h]*/
/*---------------------------------------------------------------------------/
/  FatFs - FAT file system module configuration file  R0.09  (C)ChaN, 2011
/----------------------------------------------------------------------------/
/
/ CAUTION! Do not forget to make clean the project after any changes to
/ the configuration options.
/
*/
/******************************************************************************
 *
 * Copyright (C) 2011 Infineon Technologies AG. All rights reserved.
 *
 * Infineon Technologies AG (Infineon) is supplying this software for use with 
 * Infineon's microcontrollers. 
 * This file can be freely distributed within development
 * tools that are supporting such microcontrollers. 
 *
 * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * INFINEON SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4000 Series                                         **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR : App Developer                                                     **
**                                                                            **
** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
**                                                                            **
** MODIFICATION DATE : July 31, 2012                                           **
**                                                                            **
*******************************************************************************/

/*******************************************************************************
**                       Author(s) Identity                                   **
********************************************************************************
**                                                                            **
** Initials    Name                                                           **
** ---------------------------------------------------------------------------**
** SK          App Developer                                                  **
*******************************************************************************/

#ifndef _FFCONF
#define _FFCONF 6502	/* Revision ID */



<% String AppBaseuri = "app/fatfs002/"; %>
<% int appInst = 0; %>
<% int  FatFsTiny = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_tiny_fs/0");
   int  FatFsReadOnly = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_fs_readonly/0");
   int Minimize = 0;
   int UseStr = 0;
   int CodePage = 932;
   int LfnCode = 0;
   int UseRelative = 0;
   int WordAccess = 0;
   
   int  FatFsMinimize = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_fs_minimize/0");
   if( FatFsMinimize == 1)
   {
     Minimize = 0;
   }
   FatFsMinimize = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_fs_minimize/1");
   if( FatFsMinimize == 1)
   {
     Minimize = 1;
   }
   FatFsMinimize = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_fs_minimize/2");
   if( FatFsMinimize == 1)
   {
     Minimize = 2;
   }
   FatFsMinimize = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_fs_minimize/3");
   if( FatFsMinimize == 1)
   {
     Minimize = 3;
   }
    
   int  FatFsUseStr = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_use_strfunc/0");
   if( FatFsUseStr == 1)
   {
     UseStr = 0;
   }
   FatFsUseStr = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_use_strfunc/1");
   if( FatFsUseStr == 1)
   {
     UseStr = 1 ;
   }
   FatFsUseStr = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_use_strfunc/2");
   if( FatFsUseStr == 1)
   {
     UseStr = 2 ;
   }
   
   int  FatFsUseMkfs = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_use_mkfs/0");
   int  FatFsUseFwd = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_use_forward/0");
   int  FatFsUseSeek = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_fast_seek/0");
   
   int  FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/0");
   if( FatFsCodePage == 1)
   {
     CodePage = 932 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/1");
   if( FatFsCodePage == 1)
   {
     CodePage = 936 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/2");
   if( FatFsCodePage == 1)
   {
     CodePage = 949 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/3");
   if( FatFsCodePage == 1)
   {
     CodePage = 950 ;
   }
   
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/4");
   if( FatFsCodePage == 1)
   {
     CodePage = 1250 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/5");
   if( FatFsCodePage == 1)
   {
     CodePage = 1251 ;
   }
   
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/6");
   if( FatFsCodePage == 1)
   {
     CodePage = 1252 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/7");
   if( FatFsCodePage == 1)
   {
     CodePage = 1253 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/8");
   if( FatFsCodePage == 1)
   {
     CodePage = 1254 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/9");
   if( FatFsCodePage == 1)
   {
     CodePage = 1255 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/10");
   if( FatFsCodePage == 1)
   {
     CodePage = 1256 ;
   }
   
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/11");
   if( FatFsCodePage == 1)
   {
     CodePage = 1257 ;
   }
   
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/12");
   if( FatFsCodePage == 1)
   {
     CodePage = 1258 ;
   }
   
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/13");
   if( FatFsCodePage == 1)
   {
     CodePage = 437 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/14");
   if( FatFsCodePage == 1)
   {
     CodePage = 720 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/15");
   if( FatFsCodePage == 1)
   {
     CodePage = 737 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/16");
   if( FatFsCodePage == 1)
   {
     CodePage = 775 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/17");
   if( FatFsCodePage == 1)
   {
     CodePage = 850 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/18");
   if( FatFsCodePage == 1)
   {
     CodePage = 858 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/19");
   if( FatFsCodePage == 1)
   {
     CodePage = 852 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/20");
   if( FatFsCodePage == 1)
   {
     CodePage = 855 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/21");
   if( FatFsCodePage == 1)
   {
     CodePage = 866 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/22");
   if( FatFsCodePage == 1)
   {
     CodePage = 857 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/23");
   if( FatFsCodePage == 1)
   {
     CodePage = 862 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/24");
   if( FatFsCodePage == 1)
   {
     CodePage = 874 ;
   }
   FatFsCodePage = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_code_page/25");
   if( FatFsCodePage == 1)
   {
     CodePage = 1 ;
   }
//   int  FatFsUseLfn = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_lfn/0");
   
   int  FatFsLfnCode = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_lfn_unicode/0");
   if( FatFsLfnCode == 1)
   {
     LfnCode = 0 ;
   }
   FatFsLfnCode = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_lfn_unicode/1");
   if( FatFsLfnCode == 1)
   {
     LfnCode = 1 ;
   }
   
   int  FatFsUseRelative = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_relative_path/0");
   if( FatFsUseRelative == 1)
   {
     UseRelative = 0;
   }
   FatFsUseRelative = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_relative_path/1");
   if( FatFsUseRelative == 1)
   {
     UseRelative = 1 ;
   } 
   FatFsUseRelative = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_relative_path/2");
   if( FatFsUseRelative == 1)
   {
     UseRelative = 2 ;
   } 
   
      
   int  FatFsMultPart = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_multi_partition/0");
   if( FatFsMultPart == 1)
   {
     FatFsMultPart = 2 ;
   }
   int  FatFsUseErase = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_erase/0");
   int  FatFsWordAccess = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_word_access/0");
   if( FatFsWordAccess == 1)
   {
     WordAccess = 0 ;
   } 
   FatFsWordAccess = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_word_access/1");
   if( FatFsWordAccess == 1)
   {
     WordAccess = 1 ;
   } 
    
   int  FatFsMaxLfn = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_max_lfn");
   
   int  FatFsMaxVol = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_volumes");
   
   int  FatFsTimeout = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_timeout");
   int  FatFsShare = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_fs_share");
   int  FatFsReentrant = app.getIntegerValue(AppBaseuri + appInst + "/fatfs002_fs_reentrant");
   
%>

/*---------------------------------------------------------------------------/
/ Functions and Buffer Configurations
/----------------------------------------------------------------------------*/

#define	_FS_TINY		<%= FatFsTiny %>	/* 0:Normal or 1:Tiny */
/* When _FS_TINY is set to 1, FatFs uses the sector buffer in the file system
/  object instead of the sector buffer in the individual file object for file
/  data transfer. This reduces memory consumption 512 bytes each file object. */


#define _FS_READONLY	<%= FatFsReadOnly %>	/* 0:Read/Write or 1:Read only */
/* Setting _FS_READONLY to 1 defines read only configuration. This removes
/  writing functions, f_write, f_sync, f_unlink, f_mkdir, f_chmod, f_rename,
/  f_truncate and useless f_getfree. */


#define _FS_MINIMIZE	<%= Minimize %>	/* 0 to 3 */
/* The _FS_MINIMIZE option defines minimization level to remove some functions.
/
/   0: Full function.
/   1: f_stat, f_getfree, f_unlink, f_mkdir, f_chmod, f_truncate and f_rename
/      are removed.
/   2: f_opendir and f_readdir are removed in addition to 1.
/   3: f_lseek is removed in addition to 2. */


#define	_USE_STRFUNC	<%= UseStr %>	/* 0:Disable or 1-2:Enable */
/* To enable string functions, set _USE_STRFUNC to 1 or 2. */


#define	_USE_MKFS	<%= FatFsUseMkfs %>		/* 0:Disable or 1:Enable */
/* To enable f_mkfs function, set _USE_MKFS to 1 and set _FS_READONLY to 0 */


#define	_USE_FORWARD	<%= FatFsUseFwd %>	/* 0:Disable or 1:Enable */
/* To enable f_forward function, set _USE_FORWARD to 1 and set _FS_TINY to 1. */


#define	_USE_FASTSEEK	<%= FatFsUseSeek %>	/* 0:Disable or 1:Enable */
/* To enable fast seek feature, set _USE_FASTSEEK to 1. */


/*---------------------------------------------------------------------------/
/ Locale and Namespace Configurations
/----------------------------------------------------------------------------*/

#define _CODE_PAGE	<%= CodePage %>
/* The _CODE_PAGE specifies the OEM code page to be used on the target system.
/  Incorrect setting of the code page can cause a file open failure.
/
/   932  - Japanese Shift-JIS (DBCS, OEM, Windows)
/   936  - Simplified Chinese GBK (DBCS, OEM, Windows)
/   949  - Korean (DBCS, OEM, Windows)
/   950  - Traditional Chinese Big5 (DBCS, OEM, Windows)
/   1250 - Central Europe (Windows)
/   1251 - Cyrillic (Windows)
/   1252 - Latin 1 (Windows)
/   1253 - Greek (Windows)
/   1254 - Turkish (Windows)
/   1255 - Hebrew (Windows)
/   1256 - Arabic (Windows)
/   1257 - Baltic (Windows)
/   1258 - Vietnam (OEM, Windows)
/   437  - U.S. (OEM)
/   720  - Arabic (OEM)
/   737  - Greek (OEM)
/   775  - Baltic (OEM)
/   850  - Multilingual Latin 1 (OEM)
/   858  - Multilingual Latin 1 + Euro (OEM)
/   852  - Latin 2 (OEM)
/   855  - Cyrillic (OEM)
/   866  - Russian (OEM)
/   857  - Turkish (OEM)
/   862  - Hebrew (OEM)
/   874  - Thai (OEM, Windows)
/	1    - ASCII only (Valid for non LFN cfg.)
*/


#define	_USE_LFN	0						/* 0 to 3 */
#define	_MAX_LFN	<%= FatFsMaxLfn %>		/* Maximum LFN length to handle (12 to 255) */
/* The _USE_LFN option switches the LFN support.
/
/   0: Disable LFN feature. _MAX_LFN and _LFN_UNICODE have no effect.
/   1: Enable LFN with static working buffer on the BSS. Always NOT reentrant.
/   2: Enable LFN with dynamic working buffer on the STACK.
/   3: Enable LFN with dynamic working buffer on the HEAP.
/
/  The LFN working buffer occupies (_MAX_LFN + 1) * 2 bytes. To enable LFN,
/  Unicode handling functions ff_convert() and ff_wtoupper() must be added
/  to the project. When enable to use heap, memory control functions
/  ff_memalloc() and ff_memfree() must be added to the project. */


#define	_LFN_UNICODE	<%= LfnCode %>	/* 0:ANSI/OEM or 1:Unicode */
/* To switch the character code set on FatFs API to Unicode,
/  enable LFN feature and set _LFN_UNICODE to 1. */


#define _FS_RPATH		<%= UseRelative %>		/* 0 to 2 */
/* The _FS_RPATH option configures relative path feature.
/
/   0: Disable relative path feature and remove related functions.
/   1: Enable relative path. f_chdrive() and f_chdir() are available.
/   2: f_getcwd() is available in addition to 1.
/
/  Note that output of the f_readdir function is affected by this option. */

/*---------------------------------------------------------------------------/
/ Physical Drive Configurations
/----------------------------------------------------------------------------*/

#define _VOLUMES	<%= FatFsMaxVol %>
/* Number of volumes (logical drives) to be used. */


#define	_MAX_SS		512		/* 512, 1024, 2048 or 4096 */
/* Maximum sector size to be handled.
/  Always set 512 for memory card and hard disk but a larger value may be
/  required for on-board flash memory, floppy disk and optical disk.
/  When _MAX_SS is larger than 512, it configures FatFs to variable sector size
/  and GET_SECTOR_SIZE command must be implememted to the disk_ioctl function. */


#define	_MULTI_PARTITION	<%= FatFsMultPart %>	/* 0:Single partition or 1/2:Enable multiple partition */
/* When set to 0, each volume is bound to the same physical drive number and
/ it can mount only first primaly partition. When it is set to 1, each volume
/ is tied to the partitions listed in VolToPart[]. */


#define	_USE_ERASE	<%= FatFsUseErase %> 	/* 0:Disable or 1:Enable */
/* To enable sector erase feature, set _USE_ERASE to 1.CTRL_ERASE_SECTOR command
/  should be added to the disk_ioctl function. */



/*---------------------------------------------------------------------------/
/ System Configurations
/----------------------------------------------------------------------------*/

#define _WORD_ACCESS	<%= WordAccess %>	/* 0 or 1 */
/* Set 0 first and it is always compatible with all platforms. The _WORD_ACCESS
/  option defines which access method is used to the word data on the FAT volume.
/
/   0: Byte-by-byte access.
/   1: Word access. Do not choose this unless following condition is met.
/
/  When the byte order on the memory is big-endian or address miss-aligned word
/  access results incorrect behavior, the _WORD_ACCESS must be set to 0.
/  If it is not the case, the value can also be set to 1 to improve the
/  performance and code size. */


/* Include a header file here to define sync object types on the O/S */
/* #include <windows.h>, <ucos_ii.h>, <semphr.h> or ohters. */

#define _FS_REENTRANT	<%= FatFsReentrant %>		/* 0:Disable or 1:Enable */


#if _FS_REENTRANT
#include "../../inc/RTOS001/RTOS001.h"
#define _FS_TIMEOUT		<%= FatFsTimeout %>	/* Timeout period in unit of time ticks */
#define	_SYNC_t			osMutexId	/* O/S dependent type of sync object. e.g. HANDLE, OS_EVENT*, ID and etc.. */
#endif
/* The _FS_REENTRANT option switches the reentrancy of the FatFs module.
/
/   0: Disable reentrancy. _SYNC_t and _FS_TIMEOUT have no effect.
/   1: Enable reentrancy. Also user provided synchronization handlers,
/      ff_req_grant, ff_rel_grant, ff_del_syncobj and ff_cre_syncobj
/      function must be added to the project. */


#define	_FS_SHARE	<%= FatFsShare %>	/* 0:Disable or >=1:Enable */
/* To enable file sharing feature, set _FS_SHARE to 1 or greater. The value
   defines how many files can be opened simultaneously. */



#endif /* _FFCONFIG */

/*CODE_BLOCK_END*/
