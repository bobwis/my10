<%@ jet package="CodeGenerator" class="spi001_confc_template"
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>

/*CODE_BLOCK_BEGIN[SPI001_Conf.c]*/
/******************************************************************************
 Copyright (c) 2011, Infineon Technologies AG                                **
 All rights reserved.                                                        **
                                                                             **
 Redistribution and use in source and binary forms, with or without          **
 modification,are permitted provided that the following conditions are met:  **
                                                                             **
 *Redistributions of source code must retain the above copyright notice,     **
 this list of conditions and the following disclaimer.                       **
 *Redistributions in binary form must reproduce the above copyright notice,  **
 this list of conditions and the following disclaimer in the documentation   **
 and/or other materials provided with the distribution.                      **
 *Neither the name of the copyright holders nor the names of its contributors**
 may be used to endorse or promote products derived from this software       ** 
 without specific prior written permission.                                  **
                                                                             **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE   **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE  **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR        **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF        **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS   **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN     **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  **
 POSSIBILITY OF SUCH DAMAGE.                                                 **
                                                                             **
 To improve the quality of the software, users are encouraged to share       **
 modifications, enhancements or bug fixes with Infineon Technologies AG      **
 dave@infineon.com).                                                         **
                                                                             **
*******************************************************************************
**                                                                           **
**                                                                           **
** PLATFORM : Infineon XMC4000/ XMC1000 Series                               **
**                                                                           **
** COMPILER : Compiler Independent                                           **
**                                                                           **
** AUTHOR   : App Developer                                                  **
**                                                                           **
** MAY BE CHANGED BY USER [yes/no]: Yes                                      **
**                                                                           **
** MODIFICATION DATE : Mar 26, 2013                                          **
**                                                                           **
******************************************************************************/
 
/******************************************************************************
**                       Author(s) Identity                                  **
*******************************************************************************
**                                                                           **
** Initials    Name                                                          **
** --------------------------------------------------------------------------**
** AEP         DAVE App Developer                                            **
******************************************************************************/

/**<% String AppBaseuri1 = "app/SPI001/";%>
 *
 * @file   SPI001_Conf.c
 *
 * @App Version SPI001 <<%=app.getAppVersion(AppBaseuri1) %>>
 *
 * @brief  Configuration file generated based on UI settings 
 *         of SPI001 App
 *
 */
/*
 * Revision History
 * 01 Jun 2012 v1.0.0   Initial version
 * 26 Jul 2012 v1.0.2   Modified to support Quad mode functionalities
 * 17 Aug 2012 v1.0.4   Macro correction in USIC.h,Fix for OutputEnable for 
 *                      HW controlled pins 
 * 04 Feb 2013 v1.0.12  1. Coding guidelines and MISRA fixes
 *                      2. Typecasting for the handle parameter for MISRA Checks
 *                      3. Generation of macros from numbers and the generation
 *                      of chipselect array modified.
 *                      4. Updated fix for UTP MCSW300000589 - Trigger Limit 
 *                      Receive-Transmit in SPI001 [1.0.4] interchanged.
 *                      5. Updatd for revision history alignments. 
 *                      6. Updated for XMC1000 devices.
 *                      7. Alignment of the revision history  
 * 26 Mar 2013 v1.0.16  1. Updated for alignment in Revision history.
 */

#include <DAVE3.h>

<% String AppBaseuri = "app/spi001/";%>
<% String Baseuri = "app/spi001/";%>
<% String Usicuri = "peripheral/usic/"; %>
<% String MappedUri = null; %>
<% String MappedUri2 = null; %>
<% String UnitInst = null; %>
<% String ChannelInst = null; %>
<% String appInst  = null; %>
<% String CS = null; %>
<% String CS0 = null; %>
<% String CS1 = null; %>
<% String CS2 = null; %>
<% String CS3 = null; %>
<% String CS4 = null; %>
<% String CS5 = null; %>
<% String CS6 = null; %>
<% String CS7 = null; %>
<% int HBmode= 0; %>
<% int ClkPol= 0; %>
<% int ClkPhase= 0; %>
<% int LeadDelay= 0; %>
<% int NextFrDelay= 0; %>
<% ArrayList<String> appsList = (ArrayList<String>)(app.getApps("app/spi001/"));
 for (String appIns : appsList ) {
 appInst = appIns.substring(appIns.lastIndexOf("/")+1);%>
<% MappedUri = app.getMappedUri(AppBaseuri + appInst + "/channel"); %>
<% if((MappedUri != null) && (MappedUri != "")) { %>
<% UnitInst = MappedUri.substring(MappedUri .length()-11,MappedUri.indexOf("/channel/")); %>
<% ChannelInst = MappedUri.substring(MappedUri.length()-1); %>

SPI001_ConfigType SPI001_Config<%=appInst%> =
{
 <%  for (int t=0; t< 2; t++) { 
	  int opmode = app.getIntegerValue(AppBaseuri + appInst + "/spi001_erwHBMode/" + t);   
	  if (opmode == 1) {  
	  HBmode = t ;
	} 
    } %>
     <%  for (int t=0; t< 2; t++) { 
	  int opmode = app.getIntegerValue(AppBaseuri + appInst + "/spi001_erwClockPolarity/" + t);   
	  if (opmode == 1) {  
	  ClkPol = t ;
	} 
    } %>
     <%  for (int t=0; t< 2; t++) { 
	  int opmode = app.getIntegerValue(AppBaseuri + appInst + "/spi001_erwClockPhase/" + t);   
	  if (opmode == 1) {  
	  ClkPhase = t ;
	} 
    } %>
 	<%  for (int t=0; t< 3; t++) { 
	  int opmode = app.getIntegerValue(AppBaseuri + appInst + "/spi001_erwLeadTrailDelay/" + t);   
	  if (opmode == 1) {  
	  LeadDelay = t ;
	} 
    } %>
    <%  for (int t=0; t< 3; t++) { 
	  int opmode = app.getIntegerValue(AppBaseuri + appInst + "/spi001_erwNextFrameDelay/" + t);   
	  if (opmode == 1) {  
	  NextFrDelay = t ;
	} 
    } %>
    
   .Mode = <% if (app.getIntegerValue(AppBaseuri + appInst + "/Mode_dummy") == 3){%>SPI001_QUAD<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/Mode_dummy") == 2){%>SPI001_DUAL<%} else if  (app.getIntegerValue(AppBaseuri + appInst + "/Mode_dummy") == 1){%>SPI001_STANDARD_HALFDUPLEX<%} else {%>SPI001_STANDARD_FULLDUPLEX<%}%>,/* SPI Mode */
   .HBMode = <%if (HBmode == 1){%>SPI001_MSB<%} else {%>SPI001_LSB<%}%>, /* Transmit LSB/MSB */
   .ClkPol =  <%if (app.getIntegerValue(AppBaseuri + appInst + "/spi001_tempclkpolarity") == 1){%>SPI001_CLK_POL1<%} else {%>SPI001_CLK_POL0<%} %>, /* Clock Polarity */
   .ClkPh =  <%if (ClkPhase == 1){%>SPI001_CLK_PHASE1<%} else {%>SPI001_CLK_PHASE0<%}%>, /* Clock Phase */
   .BaudRate = (uint32_t) <%= app.getIntegerValue(AppBaseuri + appInst +"/spi001_irwbaudrate") %>,/* Baud Rate */
   .LeadTrailDelay =  <%if (LeadDelay == 2){%>SPI001_THREE_SCLK_PERIOD<%} else if  (LeadDelay == 1){%>SPI001_TWO_SCLK_PERIOD<%} else {%>SPI001_ONE_SCLK_PERIOD<%} %>,/* Leading/TrailingDelay */
   .NextFrameDelay = <%if (NextFrDelay == 2){%>SPI001_THREE_SCLK_PERIOD<%} else if  (NextFrDelay == 1){%>SPI001_TWO_SCLK_PERIOD<%} else {%>SPI001_ONE_SCLK_PERIOD<%} %>,/* NextFrameDelay */
   .WordLen = (uint8_t) <%= app.getIntegerValue(AppBaseuri + appInst +"/channel/sctr/wle") %>,/* Wordlength */
   .FrameLen = (uint8_t) <%= app.getIntegerValue(AppBaseuri + appInst +"/channel/sctr/fle") %>,/* Framelength */   
   .CESelected = (uint8_t) CE_A /* Default Chip Select line selection */
};

SPI001_PinHandleType SPI001_PinHandle<%=appInst%>  =
{ <% String P = "http://www.infineon.com/0.1.28/port/p/"; %> 
 <% { int Port0=0;
      int Port1=0;
      int Port2=0;
      int Port3=0;
      int Pin0=0;
      int Pin1=0; 
      int Pin2=0;
      int Pin3=0;
      String portNo=null;
      String pinNo=null;
      String uriPORT=null;%>
 <% String pinUri = app.getMappedUri(Baseuri + appInst + "/mtsr0_pin");%>
 <% if ((pinUri != null) && (pinUri.trim() != "")) { %>
 <% portNo = pinUri.substring(pinUri.indexOf("port/p/")+7,pinUri.indexOf("/pad/")); %>
 
 <% pinNo = pinUri.substring(pinUri.indexOf("/pad/")+5,pinUri.length()); %> 
 <% Port0 = Integer.parseInt(portNo); %>
 <% Pin0 = Integer.parseInt(pinNo);   %>
 <% uriPORT = "port/p/" + Port0 + "/pad/" + Pin0 + "/iocr_pcr"; %>
 <%} %>  
  <% pinUri = app.getMappedUri(Baseuri + appInst + "/mrst0_pin");%>
  <% if ((pinUri != null) && (pinUri.trim() != "")) { %>
  <% portNo = pinUri.substring(pinUri.indexOf("port/p/")+7,pinUri.indexOf("/pad/")); %>
  <% pinNo = pinUri.substring(pinUri.indexOf("/pad/")+5,pinUri.length()); %> 
  <% Port1 = Integer.parseInt(portNo); %>
  <% Pin1 = Integer.parseInt(pinNo);   %>
  <%} %>
   <% if ((pinUri == null) || (pinUri.trim() == "")) { %>
   <% Port1 = 0; %>
   <% Pin1 = 0;  %>
   <%} %>
   <% pinUri = app.getMappedUri(Baseuri + appInst + "/mtsr2_hwpin");%>
   <% if ((pinUri != null) && (pinUri.trim() != "")) { %>
     <% portNo = pinUri.substring(pinUri.indexOf("port/p/")+7,pinUri.indexOf("/pad/")); %>
     <% pinNo = pinUri.substring(pinUri.indexOf("/pad/")+5,pinUri.length()); %> 
     <% Port2 = Integer.parseInt(portNo); %>
     <% Pin2 = Integer.parseInt(pinNo);   %>
     <%} %>
      <% if ((pinUri == null) || (pinUri.trim() == "")) { %>
      <% Port2 = 0; %>
      <% Pin2 = 0;  %>
      <%} %>
      <% pinUri = app.getMappedUri(Baseuri + appInst + "/mtsr3_hwpin");%>
       <% if ((pinUri != null) && (pinUri.trim() != "")) { %>
       <% portNo = pinUri.substring(pinUri.indexOf("port/p/")+7,pinUri.indexOf("/pad/")); %>
       <% pinNo = pinUri.substring(pinUri.indexOf("/pad/")+5,pinUri.length()); %> 
       <% Port3 = Integer.parseInt(portNo); %>
       <% Pin3 = Integer.parseInt(pinNo);   %>
       <%} %>
       <% if ((pinUri == null) || (pinUri.trim() == "")) { %>
       <% Port3 = 0; %>
       <% Pin3 = 0;  %>
       <%} %>
   .Port_Num = {(uint8_t) <%=Port0%>, (uint8_t) <%=Port1%>, (uint8_t) <%=Port2%>, (uint8_t) <%=Port3%>},
   .Pin_Num  = {(uint8_t) <%=Pin0%>, (uint8_t) <%=Pin1%>,(uint8_t) <%=Pin2%>, (uint8_t) <%=Pin3%>},
    /* Pin Port Base Address */
   .PinPortRegs = {(SPI001_PORTS_TypeDef*)PORT<%=Port0%>_BASE, 
                   (SPI001_PORTS_TypeDef*)PORT<%=Port1%>_BASE, 
                   (SPI001_PORTS_TypeDef*)PORT<%=Port2%>_BASE, 
                   (SPI001_PORTS_TypeDef*)PORT<%=Port3%>_BASE
                  },
   .MRST_DSEL  = (uint8_t) <%=app.getMuxValue("peripheral/usic/" + UnitInst + "/channel/" + ChannelInst +"/dx0cr_dsel") %>, /* DSEL Value */
   .MTSR_IOCR  = (uint8_t) <%=app.getMuxValue(uriPORT) %>  /* IOCR_PCR value */   
    <%} %>
};


const SPI001_HandleType SPI001_Handle<%=appInst%>  = 
{
   .USICRegs = USIC<%= UnitInst %>_CH<%= ChannelInst %>, /* Usic Channel offset value */ 
   .FrmEndMode = <%if (app.getIntegerValue(AppBaseuri + appInst + "/channel/pcr/ctr3") == 1){%>SPI001_ENABLE_FEM<%} else {%>SPI001_DISABLE_FEM<%} %>,/* Frame End mode Selection*/
   .Config = &SPI001_Config<%=appInst%>,
   .NoOfCS = (uint8_t) <%= app.getIntegerValue(AppBaseuri + appInst +"/spi001_irwSlaveSelect") %>, /* No of ChipSelect line */
   <% int NoofCS = app.getIntegerValue(AppBaseuri + appInst +"/spi001_irwSlaveSelect");
      for (int t=0; t< NoofCS; t++) { 
 	 MappedUri2 = app.getMappedUri(AppBaseuri + appInst + "/spi001_selo" + t + "_vs"); 
 	 CS = MappedUri2.substring(MappedUri2.length()-1);
 	 if (t==0){CS0 = CS;} else if (t==1){CS1 = CS;} else if (t==2){CS2 = CS;} else if(t==3){CS3 = CS;} else if(t==4){CS4 = CS;} else if(t==5){CS5 = CS;} else  if(t==6){CS6 = CS;} else if(t==7){CS7 = CS;} else{;} 
    } %>
   .ChipSelTable = {(uint8_t) <%if(CS0 == null){%>0<%}else{%><%=Integer.parseInt(CS0)%><%}%>, (uint8_t) <%if(CS1 == null){%>0<%}else{%><%=Integer.parseInt(CS1)%><%}%>, (uint8_t) <%if(CS2 == null){%>0<%}else{%><%=Integer.parseInt(CS2)%><%}%>, (uint8_t) <%if(CS3 == null){%>0<%}else{%><%=Integer.parseInt(CS3)%><%}%>,
                    (uint8_t) <%if(CS4 == null){%>0<%}else{%><%=Integer.parseInt(CS4)%><%}%>, (uint8_t) <%if(CS5 == null){%>0<%}else{%><%=Integer.parseInt(CS5)%><%}%>, (uint8_t) <%if(CS6 == null){%>0<%}else{%><%=Integer.parseInt(CS6)%><%}%>, (uint8_t) <%if(CS7 == null){%>0<%}else{%><%=Integer.parseInt(CS7)%><%}%>
                   },
   .TxLimit = (uint8_t) <%= app.getIntegerValue(AppBaseuri + appInst +"/channel/tbctr/limit") %>,/* FIFO Tigger Level */
   .RxLimit = (uint8_t) <%= app.getIntegerValue(AppBaseuri + appInst +"/channel/rbctr/limit") %>,/* FIFO Tigger Level */
   .TxFifoSize = (uint8_t) <%= app.getIntegerValue(AppBaseuri + appInst +"/channel/tbctr_size") %>,/* Tx FIFO Size */
   .RxFifoSize = (uint8_t) <%= app.getIntegerValue(AppBaseuri + appInst +"/channel/rbctr_size") %>,/* Rx FIFO Size */
   .MSLSIntrEn = (bool) <%= app.getIntegerValue(AppBaseuri + appInst +"/channel/pcr/ctr14") %>,/* MSLS Event enable */
   .PinHandle = &SPI001_PinHandle<%=appInst%>
};
<% } %>
<% else { %>
/* CHANNEL IS NOT MAPPED */
<% } %>
<%} %>

/*CODE_BLOCK_END*/
