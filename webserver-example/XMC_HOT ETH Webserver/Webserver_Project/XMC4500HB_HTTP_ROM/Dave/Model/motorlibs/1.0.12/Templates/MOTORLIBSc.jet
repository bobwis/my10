<%@ jet package="CodeGenerator" class="motorlibsc_template"
imports="java.util.* com.ifx.davex.appjetinteract.App2JetInterface" %>
<% App2JetInterface app = (App2JetInterface) argument; %>

/*CODE_BLOCK_BEGIN[MOTORLIBS.c]*/
/*******************************************************************************
 Copyright (c) 2011, Infineon Technologies AG                                 **
 All rights reserved.                                                         **
                                                                              **
 Redistribution and use in source and binary forms, with or without           **
 modification,are permitted provided that the following conditions are met:   **
                                                                              **
 *Redistributions of source code must retain the above copyright notice,      **
 this list of conditions and the following disclaimer.                        **
 *Redistributions in binary form must reproduce the above copyright notice,   **
 this list of conditions and the following disclaimer in the documentation    **
 and/or other materials provided with the distribution.                       **
 *Neither the name of the copyright holders nor the names of its contributors **
 may be used to endorse or promote products derived from this software without**
 specific prior written permission.                                           **
                                                                              **
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
 ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
 LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
 SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
 CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
 POSSIBILITY OF SUCH DAMAGE.                                                  **
                                                                              **
 To improve the quality of the software, users are encouraged to share        **
 modifications, enhancements or bug fixes with Infineon Technologies AG       **
 dave@infineon.com).                                                          **
                                                                              **
********************************************************************************
**                                                                            **
**                                                                            **
** PLATFORM : Infineon XMC4500/XMC1000 Series                                 **
**                                                                            **
** COMPILER : Compiler Independent                                            **
**                                                                            **
** AUTHOR   : App Developer                                                   **
**                                                                            **
** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
**                                                                            **
** MODIFICATION DATE : 29 May, 2013                                            **
**                                                                            **
*******************************************************************************/

/*******************************************************************************
**                       Author(s) Identity                                   **
********************************************************************************
**                                                                            **
** Initials     Name                                                          **
** ---------------------------------------------------------------------------**
** PA           Dave App Developer                                            **
**                                                                            **
*******************************************************************************/
/**
 * @file  MOTORLIBS.c
 *
 * @brief This file contains implementations of all Public and Private functions
 *        of Motor control library.
 *
 */
 /* Revision History
 * 03 Apr 2013   v1.0.0    Initial version
 * 25 Apr 2013   v1.0.2    Added support for XMC1302
 * 29  May 2013  v1.0.12   Added FOC support for XMC1302
 */
<% String AppBaseuri = "app/motorlibs/"; %>
<% int Is44Device = -1; %>
<% int Is42Device = -1; %>
<% int Is45Device = -1; %>
<% int Is13Device = -1; %>
<% Is45Device = ((app.getSoftwareId().substring(0,2).compareTo("45")==0)?1:0); %>
<% Is44Device = ((app.getSoftwareId().substring(0,2).compareTo("44")==0)?1:0); %>
<% Is42Device = ((app.getSoftwareId().substring(0,2).compareTo("42")==0)?1:0); %>
<% Is13Device = ((app.getSoftwareId().substring(0,2).compareTo("13")==0)?1:0); %> 
/*******************************************************************************
**                      Include Files                                         **
*******************************************************************************/
#include <DAVE3.h>
#include "../../inc/MOTORLIBS/MOTORLIBS.h"
/*******************************************************************************
**                      Private Macro Definitions                             **
*******************************************************************************/
/**
 * @cond INTERNAL_DOCS
 */
/**
  * @ingroup MOTORLIBS_privatefunc
  * @{
  */
#ifdef USE_MOTORLIBS  
/*****************************************************************************
**                      Private Type Definitions                            **
******************************************************************************/
<%if(Is13Device == 1){%>
MATH_Type* const MotorMath= MATH;
<%}%>
/*****************************************************************************
 *                 Private Function declarations                             *
 *****************************************************************************/
/**
 * @}
 */
/*******************************************************************************
**                      Imported Global Variables                             **
*******************************************************************************/

/*******************************************************************************
**                      Global Constant Definitions                           **
*******************************************************************************/

/*******************************************************************************
**                      Global Variable Definitions                           **
*******************************************************************************/


/*******************************************************************************
**                      Private Constant Definitions                          **
*******************************************************************************/

/*******************************************************************************
**                 Function like macro definitions                            **
*******************************************************************************/

/*******************************************************************************
**                      Private Function Definitions                          **
*******************************************************************************/
/*******************************************************************************
**                      Public Function Definitions                           **
*******************************************************************************/

<%if(Is13Device == 1){%>
/**
 * This function is the implementation of cartesian to Polar Transformation.
 */
uint32_t MOTORLIBS_Car2Pol(int32_t x,int32_t y, int16_t *Angle)
{
  int32_t TempAngle;

  /*Clearing previous values of CORDX,CORDY and CORDZ Registers*/
  MotorMath->STATC =(uint32_t) MOTORLIBS_CLEAR_KEEPX + \
                    (uint32_t) MOTORLIBS_CLEAR_KEEPY + \
                (uint32_t) MOTORLIBS_CLEAR_KEEPZ;

  MotorMath->CON = (uint32_t) MOTORLIBS_CIRCULAR_MODE + \
                   (uint32_t) MOTORLIBS_VECTORING_MODE + \
                   (uint32_t) MOTORLIBS_CORDIC_AUTO_START + \
                   (uint32_t) MOTORLIBS_UNSIGNED_X_RESULT + \
                   (uint32_t) MOTORLIBS_MPS_DIVBY1;

  /*Loading CORDX,CORDY and CORDZ Registers*/
  WR_REG(MotorMath->CORDZ, MATH_CORDZ_DATA_Msk, \
               MATH_CORDZ_DATA_Pos, (uint32_t)0);

  WR_REG(MotorMath->CORDY, MATH_CORDY_DATA_Msk, \
               MATH_CORDY_DATA_Pos, y);

  WR_REG(MotorMath->CORDX, MATH_CORDX_DATA_Msk, \
               MATH_CORDX_DATA_Pos, x);
  /*Checking for CORIDC Busy Bit*/
  while((MotorMath->STATC &0x1)==1);
  /* Update the Amplitude and Angle Values*/
  TempAngle = MotorMath->CORRZ;
  *Angle  = (int16_t)(TempAngle >>(int32_t)16);
  return (MotorMath->CORRX>>(uint32_t)8);

}

/**
 * This function is the implementation of Polar to cartesian Transformation.
 */
int32_t MOTORLIBS_Pol2Car(int16_t Angle,uint32_t Amplitude, int32_t *X)
{
  int32_t TempAngle;
  int32_t TempX, TempY;
  TempAngle =(int32_t)Angle; 
  /*Clearing previous values of CORDX,CORDY and CORDZ Registers*/
  MotorMath->STATC =(uint32_t) MOTORLIBS_CLEAR_KEEPX + \
                    (uint32_t) MOTORLIBS_CLEAR_KEEPY + \
                    (uint32_t) MOTORLIBS_CLEAR_KEEPZ;

  MotorMath->CON = (uint32_t) MOTORLIBS_CIRCULAR_MODE + \
                   (uint32_t) MOTORLIBS_ROTATION_MODE + \
                   (uint32_t) MOTORLIBS_CORDIC_AUTO_START + \
                   (uint32_t) MOTORLIBS_UNSIGNED_X_RESULT + \
                   (uint32_t) MOTORLIBS_MPS_DIVBY1;

  /*Loading CORDX,CORDY and CORDZ Registers*/
  MotorMath->CORDZ= TempAngle <<((uint32_t)8+MATH_CORDZ_DATA_Pos);

  WR_REG(MotorMath->CORDY, MATH_CORDY_DATA_Msk, \
               MATH_CORDY_DATA_Pos, 0);
  WR_REG(MotorMath->CORDX, MATH_CORDX_DATA_Msk, \
                       MATH_CORDX_DATA_Pos, Amplitude);

  /*Checking for CORIDC Busy Bit*/
  while((MotorMath->STATC &0x1)==1);
  /* Update the x and y Values*/
  TempX  =MotorMath->CORRX;
  TempY = MotorMath->CORRY;

  *X = (TempX >>(int32_t)8);
  return (TempY >>(int32_t)8);
}

/**
 * This function is the implementation of park transform.
 */
int32_t MOTORLIBS_ParkTransform(int32_t Ialpha,int32_t Ibeta,int16_t Angle,int32_t *Iq)
{
  int32_t TempAngle;
  int32_t Tempd, Tempq;
  TempAngle =(int32_t)Angle; 
  /*Clearing previous values of CORDX,CORDY and CORDZ Registers*/
  MotorMath->STATC =(uint32_t) MOTORLIBS_CLEAR_KEEPX + \
                      (uint32_t) MOTORLIBS_CLEAR_KEEPY + \
                  (uint32_t) MOTORLIBS_CLEAR_KEEPZ;

  MotorMath->CON = (uint32_t) MOTORLIBS_CIRCULAR_MODE + \
                     (uint32_t) MOTORLIBS_ROTATION_MODE + \
                     (uint32_t) MOTORLIBS_CORDIC_AUTO_START + \
                     (uint32_t) MOTORLIBS_UNSIGNED_X_RESULT + \
                     (uint32_t) MOTORLIBS_MPS_DIVBY2;

   /*Loading CORDX,CORDY and CORDZ Registers*/
  MotorMath->CORDZ= TempAngle <<((uint32_t)8+MATH_CORDZ_DATA_Pos);

  WR_REG(MotorMath->CORDY, MATH_CORDY_DATA_Msk, \
                 MATH_CORDY_DATA_Pos, Ialpha);
  WR_REG(MotorMath->CORDX, MATH_CORDX_DATA_Msk, \
                         MATH_CORDX_DATA_Pos, Ibeta);

  /*Checking for CORIDC Busy Bit*/
  while((MotorMath->STATC &0x1)==1);
  /* Update the Amplitude and Angle Values*/
  Tempq  =MotorMath->CORRX;
  Tempd = MotorMath->CORRY;

  *Iq = (Tempq >>(int32_t)8);
  return (Tempd >>(int32_t)8);
}

/**
 * This function is the implementation of Inverse park transform.
 */
int32_t MOTORLIBS_IParkTransform(int32_t Id,int32_t Iq,int16_t Angle,int32_t *Ibeta)
{
  int32_t TempAngle;
  int32_t TempBeta, TempAlpha;
  TempAngle =(int32_t)Angle; 
    /*Clearing previous values of CORDX,CORDY and CORDZ Registers*/
  MotorMath->STATC =(uint32_t) MOTORLIBS_CLEAR_KEEPX + \
                      (uint32_t) MOTORLIBS_CLEAR_KEEPY + \
                  (uint32_t) MOTORLIBS_CLEAR_KEEPZ;

  MotorMath->CON = (uint32_t) MOTORLIBS_CIRCULAR_MODE + \
                     (uint32_t) MOTORLIBS_ROTATION_MODE + \
                     (uint32_t) MOTORLIBS_CORDIC_AUTO_START + \
                     (uint32_t) MOTORLIBS_UNSIGNED_X_RESULT + \
                     (uint32_t) MOTORLIBS_MPS_DIVBY4;

   /*Loading CORDX,CORDY and CORDZ Registers*/
  MotorMath->CORDZ= TempAngle <<((uint32_t)8+MATH_CORDZ_DATA_Pos);

  WR_REG(MotorMath->CORDY, MATH_CORDY_DATA_Msk, \
                 MATH_CORDY_DATA_Pos, Iq);
  WR_REG(MotorMath->CORDX, MATH_CORDX_DATA_Msk, \
                         MATH_CORDX_DATA_Pos, Id);

  /*Checking for CORIDC Busy Bit*/
  while((MotorMath->STATC &0x1)==1);
  /* Update the Amplitude and Angle Values*/
  TempAlpha  =(int32_t)MotorMath->CORRX;
  TempBeta = (int32_t)MotorMath->CORRY;
  *Ibeta = (TempBeta >>(int32_t)8);
	
  return ((TempAlpha >>(int32_t)8));
	  
}

int32_t MOTORLIBS_ClarkTransform(int32_t Phase_A, int32_t Phase_B, int32_t *Ialpha)
{
  *Ialpha	= (int32_t)(Phase_A >>1);
  return	(int32_t)(((Phase_A + 2*Phase_B)*(18918))>>(15+1)); //18918=1/sqrt(3)*2^15
}

/**
 * This function is the implementation of PT12 filter. 
 */
void MOTORLIBS_PT12Controller
(
   MOTORLIBS_PT1HandleType* HdlPtr,
   int32_t ActValue
)
{ 
  int32_t TempBuff;
  /* yn+1=yn + z1*x - z2*yn; */
  TempBuff = HdlPtr->PT1buf + ( (HdlPtr->Z1* ActValue) - (HdlPtr->Z2*(HdlPtr->PT1buf>>16)));
   
  /* Checking the buffer limits in the range of Ymin to Ymax */
  HdlPtr->PT1buf = MIN_MAX_LIMIT((TempBuff),(HdlPtr->Ymax),(HdlPtr->Ymin));

  HdlPtr->PT1OutVal = (HdlPtr->PT1buf>>16);    
} 

<%}%>
/**
 * This function is the implementation of PI controller. 
 * PIOutput= kp*error + Ki * integral of error
 */
void MOTORLIBS_PIController
(
    MOTORLIBS_PIHandleType* HdlPtr,
    int32_t RefValue,
    int32_t ActValue
)
{
  int32_t Output=0;
  /* yn(k+1)= yn(k)   + ki * e(k) */
  HdlPtr->Ibuf += (int32_t) ((int32_t)HdlPtr->Ki) * (RefValue-ActValue);

  /* Checking the buffer limits in the range of Yimin to Yimax */
  HdlPtr->Ibuf = MIN_MAX_LIMIT(((int32_t)HdlPtr->Ibuf),((int32_t)HdlPtr->Yimax),((int32_t)HdlPtr->Yimin));            

  /* y(k+1) = yn(k+1) + kp * e(k) * 64 */
  Output=  ((int32_t) ((int32_t)HdlPtr->Kp) * (RefValue-ActValue));

  Output  =  (HdlPtr->Ibuf>>15) +(Output>>9);
  
  /* Checking the buffer limits in the range of Ymin to Ymax */
  HdlPtr->PiOutVal= MIN_MAX_LIMIT(((int32_t)(Output)),((int32_t)HdlPtr->Ymax),((int32_t)HdlPtr->Ymin));

}
/**
 * This function is the implementation of PT1 filter. 
 */
void MOTORLIBS_PT1Controller
(
   MOTORLIBS_PT1HandleType* HdlPtr,
   int32_t ActValue
)
{
  int32_t TempBuff;
  /* yn+1=yn + z1*(x - yn) */
  TempBuff = HdlPtr->PT1buf + HdlPtr->Z1*(ActValue - (HdlPtr->PT1buf>>16));
  /* Checking the buffer limits in the range of Ymin to Ymax */
  HdlPtr->PT1buf = MIN_MAX_LIMIT((TempBuff),(HdlPtr->Ymax),(HdlPtr->Ymin));
  HdlPtr->PT1OutVal = (HdlPtr->PT1buf>>16);
}


#endif 

/**
 * @endcond
 */
/*CODE_BLOCK_END*/
